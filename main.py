# -*- coding: utf-8 -*-
import logging
import json
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters, ConversationHandler, CallbackContext

import config
import database as db
import scraper
import keyboards as kb

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)

# States
REG_PHONE, REG_SOCIAL, REG_CODE = range(3)
SVC, BRANCH, FILT, WEEKDAY, DATE, HOUR, CONFIRM, EMAIL = range(8)

# In-memory session storage key
SESSIONS = {}  # user_id -> {"sess": requests.Session, "csrf": str}

def _get_or_build_session(user_id: int, cookies: dict = None):
    if user_id in SESSIONS:
        return SESSIONS[user_id]["sess"], SESSIONS[user_id]["csrf"]
    sess, csrf = scraper.ensure_session(cookies=cookies)
    SESSIONS[user_id] = {"sess": sess, "csrf": csrf}
    return sess, csrf

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    u = db.get_user(user_id)
    if u:
        update.message.reply_text(
            "‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’•÷Ñ÷â ’ï’£’ø’æ’•÷Ñ /search ’∞÷Ä’°’¥’°’∂’∏’æ’ù ’°’¶’°’ø ÷Ö÷Ä’•÷Ä ’£’ø’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
        )
        return ConversationHandler.END
    contact_btn = KeyboardButton("üì± ‘ø’´’Ω’æ’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ", request_contact=True)
    update.message.reply_text(
        "‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø÷â ’ç’Ø’Ω’•’∂÷Ñ ’£÷Ä’°’∂÷Å’∏÷Ç’¥’´÷Å÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®÷â",
        reply_markup=ReplyKeyboardMarkup([[contact_btn]], one_time_keyboard=True, resize_keyboard=True),
    )
    return REG_PHONE

def reg_phone(update: Update, context: CallbackContext):
    phone = update.message.contact.phone_number if update.message.contact else update.message.text.strip()
    context.user_data["phone"] = phone
    update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’Å’•÷Ä ’Ω’∏÷Å’´’°’¨’°’Ø’°’∂ ÷Ñ’°÷Ä’ø’´ ’∞’°’¥’°÷Ä’® (’Ä‘æ’Ä):",
                              reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True))
    return REG_SOCIAL

def reg_social(update: Update, context: CallbackContext):
    social = update.message.text.strip()
    phone = context.user_data.get("phone")
    # start login flow (send code if needed)
    ok, sess, csrf = scraper.login_send_code(social, phone)
    if not ok:
        update.message.reply_text("’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’Ø’Ω’•’¨ ’∂’∏÷Ç’µ’∂’°’Ø’°’∂’°÷Å’∏÷Ç’¥’®÷â ’ì’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂ /start÷â")
        return ConversationHandler.END
    # keep session
    SESSIONS[update.effective_user.id] = {"sess": sess, "csrf": csrf}
    update.message.reply_text("‘µ’©’• ’Ω’¥’Ω ’Ø’∏’§ ’ß ’Ω’ø’°÷Å’æ’•’¨, ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’µ’∂÷â ‘µ’©’• ’π’´ ’∫’°’∞’°’∂’ª’æ’∏÷Ç’¥’ù ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ¬´0¬ª.")
    return REG_CODE

def reg_code(update: Update, context: CallbackContext):
    code = update.message.text.strip()
    phone = context.user_data.get("phone")
    social = context.user_data.get("social") or update.message.text.strip()
    user_id = update.effective_user.id
    sess, _ = _get_or_build_session(user_id)
    success = True
    if code != "0":
        success = scraper.login_verify_code(sess, social, phone, code)
    if not success:
        update.message.reply_text("’ç’Ñ’ç ’Ø’∏’§’´ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂ /start÷â")
        return ConversationHandler.END
    # save user and cookies
    cookies = sess.cookies.get_dict()
    db.upsert_user(user_id=user_id, phone=phone, social=social, cookies=cookies)
    update.message.reply_text("‘≥÷Ä’°’∂÷Å’∏÷Ç’¥’® ’°’æ’°÷Ä’ø’æ’•÷Å ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢÷â ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’Ω’Ø’Ω’•’¨ ’∏÷Ä’∏’∂’∏÷Ç’¥’®’ù /search")
    return ConversationHandler.END

def search_entry(update: Update, context: CallbackContext):
    # choose service
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®‚Ä§", reply_markup=kb.build_inline(kb.SERVICES, cols=1))
    return SVC

def pick_service(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    service_id = q.data
    context.user_data["service_id"] = service_id
    # branches dynamic
    branches = scraper.get_branches()
    context.user_data["branches"] = branches
    q.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’®‚Ä§", reply_markup=kb.build_inline(branches, cols=1))
    return BRANCH

def pick_branch(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    branch_id = q.data
    context.user_data["branch_id"] = branch_id
    q.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’∏÷Ä’∏’∂’¥’°’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®‚Ä§", reply_markup=kb.build_inline(kb.FILTERS, cols=1))
    return FILT

def pick_filter(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    choice = q.data
    context.user_data["filter"] = choice
    if choice == "closest":
        # compute closest and offer tracking
        user_id = update.effective_user.id
        u = db.get_user(user_id)
        sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
        svc = context.user_data["service_id"]
        br = context.user_data["branch_id"]
        res = scraper.find_closest_slot(sess, br, svc)
        if not res:
            q.edit_message_text("’Ñ’∏’ø’°’Ø’° ’°’¶’°’ø ÷Ö÷Ä ’π’´ ’£’ø’∂’æ’•’¨÷â ‘±’Ø’ø’´’æ’°÷Å’∂’•’û’¨ ’¥’∑’ø’°’Ø’°’∂ ’∞’•’ø÷á’∏÷Ç’¥’®’ù ’∞’°’µ’ø’∂’•’¨’∏÷Ç ’§’•’∫÷Ñ’∏÷Ç’¥ ’±’•’¶ ’ø’•’≤’•’Ø’°÷Å’∂’•’¨’∏÷Ç ‡¶ú‡¶®‡ßç‡¶Ø÷â",
                                reply_markup=kb.build_inline([("‘±’µ’∏", "track_yes"), ("’à’π", "track_no")], cols=2))
            return CONFIRM
        date_iso, time_str = res
        context.user_data["sel_date"] = date_iso
        context.user_data["sel_time"] = time_str
        msg = f"‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä‚Ä§ {date_iso} ’™’°’¥’® {time_str}÷â ‘≥÷Ä’°’∂÷Å’æ’•’û’¨ ’°’µ’Ω ’™’°’¥’°’∂’°’Ø’´ ’∞’°’¥’°÷Ä, ’Ø’°’¥ ’°’Ø’ø’´’æ’°÷Å’∂’•’û’¨ ’¥’∑’ø’°’Ø’°’∂ ’∞’•’ø÷á’∏÷Ç’¥÷â"
        q.edit_message_text(msg, reply_markup=kb.build_inline([("‘≥÷Ä’°’∂÷Å’•’¨ ’∞’´’¥’°", "book_now"),
                                                              ("‘±’Ø’ø’´’æ’°÷Å’∂’•’¨ ’∞’•’ø÷á’∏÷Ç’¥’®", "track_yes"),
                                                              ("’â’•’≤’°÷Ä’Ø’•’¨", "track_no")], cols=1))
        return CONFIRM
    elif choice == "weekday":
        q.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®‚Ä§", reply_markup=kb.build_inline(kb.WEEKDAYS, cols=2))
        return WEEKDAY
    elif choice == "date":
        q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® `’ï’ï/‘±‘±/’è’è’è’è` ÷Ü’∏÷Ä’¥’°’ø’∏’æ (÷Ö÷Ä‚Ä§ 25/08/2025)÷â")
        return DATE
    elif choice == "hour":
        q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’™’°’¥’® (0-23)’ù ÷Ö÷Ä’´’∂’°’Ø `14`÷â")
        return HOUR
    elif choice == "all":
        user_id = update.effective_user.id
        u = db.get_user(user_id)
        sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
        svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
        now = datetime.now()
        lines = []
        for mo in range(3):
            y = now.year + ((now.month - 1 + mo) // 12)
            m = ((now.month - 1 + mo) % 12) + 1
            days = scraper.fetch_available_days(sess, br, svc, y, m)
            for d in days:
                di = d
                if re.match(r"^\d{2}\.\d{2}\.\d{4}$", d):
                    di = datetime.strptime(d, "%d.%m.%Y").strftime("%Y-%m-%d")
                times = scraper.fetch_available_times(sess, br, svc, di)
                if times:
                    lines.append(f"{di}: {', '.join(times)}")
        if not lines:
            q.edit_message_text("‘±’º’°’ª’´’Ø’° ’°’¥’´’Ω’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨÷â")
        else:
            txt = "‘±’¶’°’ø ’™’°’¥’•÷Ä’ù\n" + "\n".join(lines[:60])
            q.edit_message_text(txt)
        return ConversationHandler.END

def choose_weekday(update: Update, context: CallbackContext):
    import re
    q = update.callback_query
    q.answer()
    wd = int(q.data)
    user_id = update.effective_user.id
    u = db.get_user(user_id)
    sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
    svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
    now = datetime.now()
    for d in range(0, 90):
        dt = now + timedelta(days=d)
        if dt.weekday() == wd:
            di = dt.strftime("%Y-%m-%d")
            ts = scraper.fetch_available_times(sess, br, svc, di)
            if ts:
                context.user_data["sel_date"] = di
                context.user_data["sel_time"] = ts[0]
                q.edit_message_text(f"‘±’º’°’ª’´’Ø’° {di}’ù ’™’°’¥’® {ts[0]}÷â ‘≥÷Ä’°’∂÷Å’æ’•’û’¨÷â",
                                    reply_markup=kb.build_inline([("‘±’µ’∏, ’£÷Ä’°’∂÷Å’•’¨", "book_now"), ("’à’π", "track_no")], cols=2))
                return CONFIRM
    q.edit_message_text("’è÷Ä’æ’°’Æ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’™’°’¥’°’∂’°’Ø ’π’´ ’£’ø’∂’æ’•’¨ ’¥’∏’ø 90 ÷Ö÷Ä’æ’° ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥÷â")
    return ConversationHandler.END

def input_date(update: Update, context: CallbackContext):
    import re
    t = update.message.text.strip()
    try:
        d, m, y = map(int, re.split(r"[./-]", t))
        date_iso = datetime(y, m, d).strftime("%Y-%m-%d")
    except Exception:
        update.message.reply_text("’ç’≠’°’¨ ’±÷á’°’π’°÷É÷â ’ï÷Ä’´’∂’°’Ø’ù 05/09/2025")
        return DATE
    user_id = update.effective_user.id
    u = db.get_user(user_id)
    sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
    svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
    ts = scraper.fetch_available_times(sess, br, svc, date_iso)
    if not ts:
        update.message.reply_text(f"{date_iso} ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â")
        return ConversationHandler.END
    context.user_data["sel_date"] = date_iso
    context.user_data["sel_time"] = ts[0]
    update.message.reply_text(f"{date_iso}’ù {ts[0]}÷â ‘≥÷Ä’°’∂÷Å’æ’•’û’¨÷â",
                              reply_markup=kb.build_inline([("‘±’µ’∏, ’£÷Ä’°’∂÷Å’•’¨", "book_now"), ("’à’π", "track_no")], cols=2))
    return CONFIRM

def input_hour(update: Update, context: CallbackContext):
    t = update.message.text.strip()
    if not t.isdigit():
        update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’¢’∏’≤’ª ’™’°’¥’ù ÷Ö÷Ä’´’∂’°’Ø 14")
        return HOUR
    want = int(t); 
    if want < 0 or want > 23:
        update.message.reply_text("‘∫’°’¥’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ 0-23 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥")
        return HOUR
    user_id = update.effective_user.id
    u = db.get_user(user_id)
    sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
    svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
    now = datetime.now()
    for d in range(0, 90):
        di = (now + timedelta(days=d)).strftime("%Y-%m-%d")
        ts = scraper.fetch_available_times(sess, br, svc, di)
        for hhmm in ts:
            try:
                hh = int(hhmm.split(":")[0])
                if hh == want:
                    context.user_data["sel_date"] = di
                    context.user_data["sel_time"] = hhmm
                    update.message.reply_text(f"‘±’º’°’ª’´’∂ ’∞’°’Ω’°’∂’•’¨’´ {want}:00-’®’ù {di}’ù {hhmm}÷â ‘≥÷Ä’°’∂÷Å’æ’•’û’¨÷â",
                                              reply_markup=kb.build_inline([("‘±’µ’∏, ’£÷Ä’°’∂÷Å’•’¨", "book_now"), ("’à’π", "track_no")], cols=2))
                    return CONFIRM
            except Exception:
                continue
    update.message.reply_text("’Ñ’∏’ø ‡∞ï‡∞æ‡∞≤’∏÷Ç’¥ ’°’µ’§ ’™’°’¥’´’∂ ’°’¶’°’ø ’Ø’ø÷Ä’∏’∂ ’π’´ ’£’ø’∂’æ’•’¨÷â")
    return ConversationHandler.END

def confirm_stage(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    action = q.data
    if action == "track_no":
        q.edit_message_text("’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
        return ConversationHandler.END
    if action == "track_yes":
        # enable tracker
        user_id = update.effective_user.id
        svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
        db.upsert_tracker(user_id, svc, br, last_best_date=None, enabled=True)
        # schedule job
        context.job_queue.run_repeating(check_tracker_job, interval=config.TRACK_INTERVAL_MINUTES * 60,
                                        first=10, context={"user_id": user_id, "service_id": svc, "branch_id": br},
                                        name=f"track:{user_id}:{svc}:{br}")
        q.edit_message_text("’Ñ’∑’ø’°’Ø’°’∂ ’∞’•’ø÷á’∏÷Ç’¥’® ’°’Ø’ø’´’æ’°÷Å’æ’°’Æ ’ß÷â ‘µ÷Ä’¢ ’°’æ’•’¨’´ ’¥’∏’ø’´’Ø ÷Ö÷Ä ’£’ø’∂’æ’´’ù ’Ø’ø’•’≤’•’Ø’°÷Å’∂’•’∂÷Ñ÷â")
        return ConversationHandler.END
    if action == "book_now":
        # ensure email
        user_id = update.effective_user.id
        u = db.get_user(user_id)
        if not u.get("email"):
            q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Å’•÷Ä ’ß’¨‚Ä§ ÷É’∏’Ω’ø’®’ù ’°’¥÷Ä’°’£÷Ä’∏÷Ç’¥’® ’°’æ’°÷Ä’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
            return EMAIL
        # otherwise book
        return do_booking(q, context, u["email"])

def receive_email(update: Update, context: CallbackContext):
    email = update.message.text.strip()
    user_id = update.effective_user.id
    db.update_user(user_id, {"email": email})
    return do_booking(update, context, email)

def do_booking(carrier, context: CallbackContext, email: str):
    # carrier can be CallbackQuery or Message
    user_id = carrier.effective_user.id if hasattr(carrier, "effective_user") else context._user_id_and_data[0]
    u = db.get_user(user_id)
    sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies") if u else None)
    svc = context.user_data["service_id"]; br = context.user_data["branch_id"]
    di = context.user_data["sel_date"]; hhmm = context.user_data["sel_time"]
    ok = scraper.book_appointment(sess, br, svc, di, hhmm, email)
    if ok:
        text = "‘±’¥÷Ä’°’£÷Ä’∏÷Ç’¥’® ’∞’°’ª’∏’≤’æ’•÷Å ‚úÖ"
    else:
        text = "‘±’¥÷Ä’°’£÷Ä’∏÷Ç’¥’® ’π’∞’°’ª’∏’≤’æ’•÷Å ‚ùå (’Ø’ø÷Ä’∏’∂’® ’Ø’°÷Ä’∏’≤ ’ß ’¶’¢’°’≤’æ’°’Æ ’¨’´’∂’•’¨)"
    if hasattr(carrier, "edit_message_text"):
        carrier.edit_message_text(text)
    else:
        carrier.message.reply_text(text)
    return ConversationHandler.END

def check_tracker_job(context: CallbackContext):
    job = context.job
    data = job.context or {}
    user_id = data.get("user_id"); svc = data.get("service_id"); br = data.get("branch_id")
    if not user_id or not svc or not br:
        return
    u = db.get_user(user_id)
    if not u or not u.get("cookies"):
        return
    sess, _ = _get_or_build_session(user_id, cookies=u.get("cookies"))
    # find closest now
    res = scraper.find_closest_slot(sess, br, svc)
    if not res:
        return
    date_iso, time_str = res
    # compare with last_best_date from DB
    trackers = db.get_trackers_for_user(user_id)
    last = None
    for t in trackers:
        if t["service_id"] == svc and t["branch_id"] == br:
            last = t.get("last_best_date")
            break
    def date_tuple(x: str):
        return tuple(map(int, x.split("-")))
    should_notify = False
    if last:
        try:
            should_notify = date_tuple(date_iso) < date_tuple(last)
        except Exception:
            should_notify = (date_iso != last)
    else:
        should_notify = True
    if should_notify:
        context.bot.send_message(chat_id=user_id,
                                 text=f"’Ü’∏÷Ä’ù ’°’æ’•’¨’´ ’¥’∏’ø ÷Ö÷Ä ’£’ø’°’∂÷Ñ‚Ä§ {date_iso} ’™’°’¥’® {time_str}")
        db.update_tracker_last_date(user_id, svc, br, date_iso)

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’§’°’§’°÷Ä’•÷Å’æ’•÷Å÷â")
    return ConversationHandler.END

def main():
    updater = Updater(token=config.BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    reg_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REG_PHONE: [MessageHandler(Filters.contact | Filters.text, reg_phone)],
            REG_SOCIAL: [MessageHandler(Filters.text & ~Filters.command, reg_social)],
            REG_CODE: [MessageHandler(Filters.text & ~Filters.command, reg_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    search_conv = ConversationHandler(
        entry_points=[CommandHandler("search", search_entry)],
        states={
            SVC: [CallbackQueryHandler(pick_service, pattern=r"^\d+$")],
            BRANCH: [CallbackQueryHandler(pick_branch, pattern=r"^\d+$")],
            FILT: [CallbackQueryHandler(pick_filter, pattern=r"^(closest|weekday|date|hour|all)$")],
            WEEKDAY: [CallbackQueryHandler(choose_weekday, pattern=r"^[0-6]$")],
            DATE: [MessageHandler(Filters.text & ~Filters.command, input_date)],
            HOUR: [MessageHandler(Filters.text & ~Filters.command, input_hour)],
            CONFIRM: [CallbackQueryHandler(confirm_stage, pattern=r"^(book_now|track_yes|track_no)$")],
            EMAIL: [MessageHandler(Filters.text & ~Filters.command, receive_email)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    dp.add_handler(reg_conv)
    dp.add_handler(search_conv)
    dp.add_handler(CommandHandler("cancel", cancel))

    # start polling + jobqueue is available via updater.job_queue
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    import re  # used in some functions
    main()
