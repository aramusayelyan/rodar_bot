import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from config import TELEGRAM_TOKEN
from keyboards import (
    BRANCHES, branch_keyboard, exam_keyboard, filter_keyboard,
    weekday_keyboard, contact_request_keyboard, THEORY_ID, PRACTICE_ID
)
from scraper import fetch_available_slots

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("bot")

# ’ç’©’•’µ’©’∂’•÷Ä
PHONE, BRANCH, EXAM, FILTER, WEEKDAY, DATE_INPUT, HOUR_INPUT = range(7)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø, {user.first_name or '’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤'} üòä"
    )
    if context.user_data.get("phone"):
        await update.message.reply_text("’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’°÷Ä’§’•’∂ ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß÷â")
        await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’®’ù", reply_markup=branch_keyboard())
        return BRANCH
    else:
        await update.message.reply_text(
            "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ø’´’Ω’æ’•’¨ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ’ù ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
            reply_markup=contact_request_keyboard
        )
        return PHONE

# ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä
async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("’ç’•’≤’¥’•÷Ñ ¬´üì± ‘ø’´’Ω’æ’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ¬ª ’Ø’∏’≥’°’Ø’®÷â")
        return PHONE
    context.user_data["phone"] = contact.phone_number
    await update.message.reply_text("’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß ‚úÖ")
    await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’®’ù", reply_markup=branch_keyboard())
    return BRANCH

# ‘≤’°’™’´’∂
async def branch_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        bid = int(q.data.split(":")[1])
    except Exception:
        await q.edit_message_text("’ç’≠’°’¨ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂÷â ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å /start")
        return ConversationHandler.END
    context.user_data["branch_id"] = bid
    name = next((n for n, id_ in BRANCHES if id_ == bid), "‘∏’∂’ø÷Ä’æ’°’Æ ’¢’°’™’´’∂")
    await q.edit_message_text(f"‘∏’∂’ø÷Ä’æ’°’Æ ’¢’°’™’´’∂’®’ù {name} üè¢")
    await q.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®’ù", reply_markup=exam_keyboard())
    return EXAM

# ’î’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø
async def exam_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        sid = int(q.data.split(":")[1])
    except Exception:
        await q.edit_message_text("’ç’≠’°’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø÷â ’ç’Ø’Ω’•÷Ñ /start")
        return ConversationHandler.END
    context.user_data["service_id"] = sid
    await q.edit_message_text(
        f"‘∏’∂’ø÷Ä’æ’°’Æ’ù {'’è’•’Ω’°’Ø’°’∂' if sid == THEORY_ID else '‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂'} ÷Ñ’∂’∂’∏÷Ç’©’µ’∏÷Ç’∂ üìù"
    )
    await q.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ü’´’¨’ø÷Ä’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®’ù", reply_markup=filter_keyboard())
    return FILTER

# ’ñ’´’¨’ø÷Ä
async def filter_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    choice = q.data.split(":")[1]
    context.user_data["filter"] = choice
    if choice == "weekday":
        await q.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®’ù", reply_markup=weekday_keyboard())
        return WEEKDAY
    elif choice == "date":
        await q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’®’ù ’ï’ï.‘±‘±.’è’è’è’è ’±÷á’°’π’°÷É’∏’æ (÷Ö÷Ä‚Ä§ 05.09.2025)")
        return DATE_INPUT
    elif choice == "hour":
        await q.edit_message_text("’Ñ
