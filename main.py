import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from config import TELEGRAM_TOKEN
from keyboards import BRANCH_OPTIONS, EXAM_TYPE_OPTIONS, FILTER_TYPE_OPTIONS, WEEKDAY_OPTIONS
from scraper import fetch_available_slots

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

PHONE, BRANCH, EXAM_TYPE, FILTER_TYPE, WEEKDAY = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    btn = KeyboardButton("üì± ‘ø’´’Ω’æ’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ", request_contact=True)
    kb = ReplyKeyboardMarkup([[btn]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ ’Ø’∏’≥’°’Ø’®÷â",
        reply_markup=kb,
    )
    return PHONE

async def receive_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.contact.phone_number if update.message.contact else update.message.text
    context.user_data["phone"] = phone.strip()
    branches_rows = [BRANCH_OPTIONS[i:i+3] for i in range(0, len(BRANCH_OPTIONS), 3)]
    await update.message.reply_text(
        "‘∏’∂’ø÷Ä’•÷Ñ ’∞’°’∑’æ’°’º’¥’°’∂-÷Ñ’∂’∂’°’Ø’°’∂ ’¢’°’™’´’∂’®‚Ä§",
        reply_markup=ReplyKeyboardMarkup(branches_rows, one_time_keyboard=True, resize_keyboard=True),
    )
    return BRANCH

async def receive_branch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["branch"] = update.message.text
    await update.message.reply_text(
        "‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®‚Ä§",
        reply_markup=ReplyKeyboardMarkup([EXAM_TYPE_OPTIONS], one_time_keyboard=True, resize_keyboard=True),
    )
    return EXAM_TYPE

async def receive_exam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["exam_type"] = update.message.text
    await update.message.reply_text(
        "‘ª’∂’π’∫’•’Ω ÷Å’∏÷Ç÷Å’°’§÷Ä’•’¨ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®÷â",
        reply_markup=ReplyKeyboardMarkup([FILTER_TYPE_OPTIONS], one_time_keyboard=True, resize_keyboard=True),
    )
    return FILTER_TYPE

async def receive_filter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    context.user_data["filter_type"] = choice
    if choice == "‘∏’Ω’ø ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’æ’°":
        rows = [WEEKDAY_OPTIONS[:3], WEEKDAY_OPTIONS[3:6], WEEKDAY_OPTIONS[6:]]
        await update.message.reply_text(
            "‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®‚Ä§",
            reply_markup=ReplyKeyboardMarkup(rows, one_time_keyboard=True, resize_keyboard=True),
        )
        return WEEKDAY
    await provide_results(update, context)
    return ConversationHandler.END

async def receive_weekday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["weekday"] = update.message.text
    await provide_results(update, context)
    return ConversationHandler.END

async def provide_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    branch = context.user_data.get("branch")
    exam_type = context.user_data.get("exam_type")
    filter_type = context.user_data.get("filter_type")
    weekday = context.user_data.get("weekday")

    await update.message.reply_text("üîé ’ì’∂’ø÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’Ω’°’∂’•’¨’´ ’™’°’¥’•÷Ä, ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’∫’°’Ω’•’¨‚Ä¶")
    slots = await asyncio.to_thread(fetch_available_slots, branch, exam_type)

    if slots is None:
        await update.message.reply_text("’Ü’•÷Ä’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂, ’ø’æ’µ’°’¨’∂’•÷Ä’® ’Ω’ø’°’∂’°’¨ ’π’∞’°’ª’∏’≤’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ’¥’´ ÷É’∏÷Ñ÷Ä ’∏÷Ç’∑÷â")
        return

    filtered = slots
    if filter_type == "‘∏’Ω’ø ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’æ’°":
        filtered = [s for s in slots if weekday and weekday in s]
    elif filter_type == "‘±’º’°’ª’´’∂ ’∞’°’Ω’°’∂’•’¨’´ ÷Ö÷Ä’®" and slots:
        filtered = [slots[0]]

    if not filtered:
        await update.message.reply_text("‘±’µ’Ω ’∫’°’∞’´’∂ ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨÷â")
    else:
        await update.message.reply_text("’Ä’°’Ω’°’∂’•’¨’´ ’™’°’¥’•÷Ä’ù\n" + "\n".join(f"‚Ä¢ {s}" for s in filtered))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‘≥’∏÷Ä’Æ’®’∂’©’°÷Å’® ’π’•’≤’°÷Ä’Ø’æ’•÷Å÷â /start’ù ’∂’∏÷Ä’´÷Å ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
    return ConversationHandler.END

def main() -> None:
    # ‚úÖ ’Ü’∏÷Ä API ‚Äî ’°’º’°’∂÷Å ApplicationBuilder-’´
    app: Application = Application.builder().token(TELEGRAM_TOKEN).concurrent_updates(False).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHONE: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), receive_phone)],
            BRANCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_branch)],
            EXAM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_exam)],
            FILTER_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_filter)],
            WEEKDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_weekday)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
