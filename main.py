from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from keyboards import main_menu_keyboard, exam_type_keyboard, service_keyboard
from scraper import get_available_dates

user_data = {}

# /start ’∞÷Ä’°’¥’°’∂
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_button = KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä", request_contact=True)
    await update.message.reply_text(
        "‘≤’°÷Ä÷á üôå\n’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®’ù ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
        reply_markup=ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True)
    )

# ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥
async def save_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id] = {"phone": update.message.contact.phone_number}
    await update.message.reply_text(
        "‚úÖ ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’∫’°’∞’∫’°’∂’æ’•÷Å÷â\n‘∏’∂’ø÷Ä’•÷Ñ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’®÷â",
        reply_markup=main_menu_keyboard()
    )

# ’ç’∏÷Ç’¢’§’´’æ’´’¶’´’°’µ’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
async def choose_exam_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["department"] = update.message.text
    await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®÷â", reply_markup=exam_type_keyboard())

# ’î’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
async def choose_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["exam_type"] = update.message.text
    await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’®÷â", reply_markup=service_keyboard())

# ’é’•÷Ä’ª’∂’°’Ø’°’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥
async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service = update.message.text
    phone = user_data[update.message.chat_id]["phone"]
    department = user_data[update.message.chat_id]["department"]
    exam_type = user_data[update.message.chat_id]["exam_type"]

    results = get_available_dates(department, exam_type, service)
    if results:
        await update.message.reply_text("üìÖ ‘±’¶’°’ø ÷Ö÷Ä’•÷Ä ÷á ’™’°’¥’•÷Ä’ù\n" + "\n".join(results))
    else:
        await update.message.reply_text("‚ùå ‘±’¶’°’ø ÷Ö÷Ä’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨÷â")

# ’ñ’∏’∂’°’µ’´’∂ ’©’°÷Ä’¥’°÷Å’¥’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°
async def refresh_data_job(context: ContextTypes.DEFAULT_TYPE):
    print("üîÑ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥...")  
    # ‘±’µ’Ω’ø’•’≤ ’Ø’°’∂’π’´÷Ä scraper ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂, ’•’©’• ’∏÷Ç’¶’∏÷Ç’¥ ’•’Ω ’∂’°’≠’°’∫’•’Ω ÷Ñ’°’∑’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Job queue every 2 hours
    job_queue = application.job_queue
    job_queue.run_repeating(refresh_data_job, interval=2*60*60, first=0)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.CONTACT, save_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, choose_exam_type))

    application.run_polling()

if __name__ == "__main__":
    main()
