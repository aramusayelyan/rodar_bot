import os
import logging
from datetime import datetime
from telegram import (Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, 
                      InlineKeyboardButton)
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from scraper import fetch_availability  # ÷Ü’∏÷Ç’∂’Ø÷Å’´’° ’ø’æ’µ’°’¨’∂’•÷Ä’´ ÷Ñ’°’≤’¥’°’∂ ’∞’°’¥’°÷Ä (Selenium)

# ’ç’ø’°’∂’°’¨ Token ÷á Admin chat ID ’¥’´’ª’°’æ’°’µ÷Ä’´ ÷É’∏÷É’∏’≠’°’Ø’°’∂’∂’•÷Ä’´÷Å (’Ø’°’¥ ’Ω’°’∞’¥’°’∂’•’¨ ’¢’•’º’∂’•’¨’∏’æ `.env` ÷Ü’°’µ’¨’´÷Å)
BOT_TOKEN = os.getenv("BOT_TOKEN", "<YOUR-BOT-TOKEN>")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ’∫’•’ø÷Ñ ’ß ’¨÷Ä’°÷Å’∂’•’¨ ’°’§’¥’´’∂’´ real chat ID-’∂ ’∏÷Ä’∫’•’Ω ÷É’∏÷É’∏’≠’°’Ø’°’∂

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ’Ü’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’•’¨ ’∂’•÷Ä÷Ñ’´’∂ data structure’ù availability ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
# context.bot_data['availability'] ’Ø’∫’°’∞’´ ’Ω’ø’°÷Å’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’±÷á’°’π’°÷É’∏’æ: availability[branch][exam_type] = { date: [times] }
# ’ï÷Ä’´’∂’°’Ø: availability["Yerevan"]["theory"] = { date_obj: ["09:00", "09:15", ...], ... }
# ‘±’µ’Ω structure-’∂ ’©’°÷Ä’¥’°÷Å’æ’•’¨’∏÷Ç ’ß background task-’´ ’Ø’∏’≤’¥’´÷Å:
# ’Ü’∑’∏÷Ç’¥: Branch-’•÷Ä’∂ ’°’µ’Ω’ø’•’≤ ’Ø’°÷Ä’•’¨’´ ’ß ’∫’°’∞’•’¨ ’°’∂’£’¨’•÷Ä’•’∂ ’Ø’°’¥ ’∞’°’µ’•÷Ä’•’∂ ’°’∂’æ’°’∂’∏÷Ç’¥’∂’•÷Ä’∏’æ ’Ø’°’¥ ID-’∂’•÷Ä’∏’æ:
# ’Ñ’•’∂÷Ñ ’Ø’∫’°’∞’•’∂÷Ñ branch-’´ ’°’∂’£’¨’•÷Ä’•’∂ ’Ø’°÷Ä’≥ ’°’∂’∏÷Ç’∂ (÷Ö÷Ä. "Yerevan") ’∞’°÷Ä’¥’°÷Ä’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä, ’´’Ω’Ø exam_type ’∏÷Ä’∫’•’Ω "theory"/"practical".

# ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’ß ’Ω’°’∞’¥’°’∂’•’¨ global ÷É’∏÷É’∏’≠’°’Ø’°’∂ ’°’µ’Ω ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä, ’¢’°’µ÷Å ’Ø÷Ö’£’ø’°’£’∏÷Ä’Æ’•’∂÷Ñ context.bot_data dictionary-’®, 
# ’∏÷Ä’® application-’´ life-time ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’ø’•’≤’∂ ’ß:


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """’ç’Ø’´’¶’¢ command-’´ handler - ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’∏’≤’ª’∏÷Ç’µ’∂ ÷á ’∞’°÷Ä÷Å’∂’•’¨ contact"""
    user = update.effective_user
    # Start message
    welcome_text = (
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø, {user.first_name if user.first_name else '÷Ö’£’ø’°’ø’•÷Ä'}!\n"
        "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’Ø’´’Ω’æ’•’¨ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ÷â ’ç’•’≤’¥’•÷Ñ ’Ω’ø’∏÷Ä÷á ’¢’•÷Ä’æ’°’Æ ’Ø’∏’≥’°’Ø’®÷â"
    )
    # ’ä’°’ø÷Ä’°’Ω’ø’•’¨ reply keyboard-’® request_contact ’Ø’∏’≥’°’Ø’∏’æ
    contact_button = KeyboardButton(text="üì± ‘ø’´’Ω’æ’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
    # ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∏’≤’ª’∏÷Ç’µ’∂’´ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® contact ’Ø’∏’≥’°’Ø’∏’æ
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """’ç’ø’°’∂’°’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’Ø’∏’∂’ø’°’Ø’ø’® (’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®)"""
    contact = update.message.contact
    if contact is None:
        return  # ‘µ’©’• ’´’∂’π-’´’∂’π ’∫’°’ø’≥’°’º’∂’•÷Ä’∏’æ contact data ’π’Ø’°, ’§’°’§’°÷Ä’•÷Å’∂’•’¨
    # ’ä’°’∞’∫’°’∂’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® user_data-’∏÷Ç’¥
    context.user_data["phone"] = contact.phone_number
    # ’à’≤’ª’∏÷Ç’∂’•’¨ ÷á ’°’∂÷Å’∂’•’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’®’∂’ø÷Ä’°÷Å’°’∂’Ø’´
    await update.message.reply_text(
        "’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’Ω’ø’°÷Å’æ’•÷Å÷â\n"
        "’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’®’ù ’∏÷Ä’ø’•’≤ ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’∞’°’∂’±’∂’•’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’∏÷Ç’∂’®÷â",
        reply_markup=InlineKeyboardMarkup(generate_branch_buttons())
    )
    # ‘±’µ’Ω’ø’•’≤ ’¥’•’∂÷Ñ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’•’∂÷Ñ InlineKeyboardMarkup ’∞’´’¥’∂’°’Ø’°’∂ ’®’∂’ø÷Ä’°÷Å’°’∂’Ø’´ ’∞’°’¥’°÷Ä,
    # ’∏÷Ç’Ω’ø’´ ’∞’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ contact request keyboard-’® (’∏÷Ä’® one_time_keyboard=True ’ß÷Ä ÷á ’°÷Ä’§’•’∂ ’°’∂’ø’•’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’´):

def generate_branch_buttons():
    """’ä’°’ø÷Ä’°’Ω’ø’•’¨ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’¥’°’∂ (÷Ñ’°’≤’°÷Ñ’´) ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä’® InlineKeyboard-’´ ’∞’°’¥’°÷Ä"""
    # ’Ü’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’æ’°’Æ ÷Å’°’∂’Ø ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’∂’•÷Ä’´ (ID: ‘±’∂’æ’°’∂’∏÷Ç’¥ ’Ø’°÷Ä’≥)
    branches = [
        (1, "‘µ÷Ä÷á’°’∂"), (2, "‘≥’µ’∏÷Ç’¥÷Ä’´"), (3, "’é’°’∂’°’±’∏÷Ä"), (4, "‘±÷Ä’¥’°’æ’´÷Ä"),
        (5, "‘ø’∏’ø’°’µ÷Ñ"), (6, "‘±÷Ä’ø’°’∑’°’ø"), (7, "‘±’∑’ø’°÷Ä’°’Ø"), (8, "‘ø’°’∫’°’∂"),
        (9, "‘ª’ª÷á’°’∂"), (10, "’ç÷á’°’∂"), (11, "’Ñ’°÷Ä’ø’∏÷Ç’∂’´"), (12, "‘≥’∏÷Ä’´’Ω"), (13, "’é’°’µ÷Ñ")
    ]
    buttons = []
    for branch_id, name in branches:
        # ‘ø’°’º’∏÷Ç÷Å’•’¨ callback data ’±÷á’°’π’°÷É’∏’æ `BR_<id>`
        buttons.append([InlineKeyboardButton(text=f"{branch_id}. {name}", callback_data=f"BR_{branch_id}")])
    # ‘±’æ’•’¨’°÷Å’∂’•’¨ "’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫" ’Ø’∏’≥’°’Ø’® ’°’º’°’∂’±’´’∂ ’Ω’ø’∏÷Ä’∏’ø’∏÷Ç’¥
    buttons.append([InlineKeyboardButton(text="üì© ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫", callback_data="FB")])
    return buttons

async def branch_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """’ç’ø’∏÷Ä’°’¢’°’™’°’∂’¥’°’∂ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ callback"""
    query = update.callback_query
    await query.answer()  # ’∫’°’ø’°’Ω’≠’°’∂’•’¨ callback-’´’∂ ’∏÷Ä’∫’•’Ω’¶’´ Telegram-’® ’∞’•’º’°÷Å’∂’´ loading-’∂
    data = query.data  # ◊ú◊û◊©◊ú "BR_1"
    # ’ç’ø’°’∂’°’¨ branch ID
    try:
        branch_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        return
    # ’ä’°’∞’∫’°’∂’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’®’∂’ø÷Ä’°’Æ branch ID-’® ’Ø’°’¥ ’°’∂’∏÷Ç’∂’®
    context.user_data["branch_id"] = branch_id
    # ‘ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’∂’°÷á ’∫’°’∞’∫’°’∂’•’¨ branch ’°’∂’æ’°’∂’∏÷Ç’¥’® ’∞’•’∑’ø’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä (÷Ö÷Ä. "‘µ÷Ä÷á’°’∂")
    branch_name = get_branch_name(branch_id)
    context.user_data["branch_name"] = branch_name
    # ’Ä’´’¥’° ’°’º’°’ª’°÷Ä’Ø’•’¨ ’®’∂’ø÷Ä’•’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®
    buttons = [
        [InlineKeyboardButton(text="’è’•’Ω’°’Ø’°’∂", callback_data="EX_theory")],
        [InlineKeyboardButton(text="‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂", callback_data="EX_practical")],
        [InlineKeyboardButton(text="üîô ’ì’∏’≠’•’¨ ’¢’°’™’´’∂", callback_data="CHANGE_BRANCH")]
    ]
    # ’é’•÷Ä’°’∂’æ’•÷Ä’°÷É’∏’≠’•’¨ ’∏÷Ç’≤’•÷Ä’±’®’ù ’°’º’°’ª’°÷Ä’Ø’•’¨’∏’æ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®
    await query.edit_message_text(
        f"‘∏’∂’ø÷Ä’°’Æ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’®’ù {branch_name}÷â\n’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®‚Ä§",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

def get_branch_name(branch_id: int) -> str:
    """’ï’™’°’∂’§’°’Ø ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’ù ID-’∏’æ ’Ω’ø’°’∂’°’¨’∏÷Ç ÷Ñ’°’≤’°÷Ñ’´ ’°’∂’æ’°’∂’∏÷Ç’¥’®"""
    branch_map = {
        1: "‘µ÷Ä÷á’°’∂", 2: "‘≥’µ’∏÷Ç’¥÷Ä’´", 3: "’é’°’∂’°’±’∏÷Ä", 4: "‘±÷Ä’¥’°’æ’´÷Ä",
        5: "‘ø’∏’ø’°’µ÷Ñ", 6: "‘±÷Ä’ø’°’∑’°’ø", 7: "‘±’∑’ø’°÷Ä’°’Ø", 8: "‘ø’°’∫’°’∂",
        9: "‘ª’ª÷á’°’∂", 10: "’ç÷á’°’∂", 11: "’Ñ’°÷Ä’ø’∏÷Ç’∂’´", 12: "‘≥’∏÷Ä’´’Ω", 13: "’é’°’µ÷Ñ"
    }
    return branch_map.get(branch_id, "’°’∂’∞’°’µ’ø")

async def exam_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """’î’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ callback"""
    query = update.callback_query
    await query.answer()
    data = query.data  # "EX_theory" ’Ø’°’¥ "EX_practical"
    exam_type = "theory" if data == "EX_theory" else "practical"
    context.user_data["exam_type"] = exam_type
    # ‘±’º’°’ª’°÷Ä’Ø’•’¨ ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä’® (’°’¶’°’ø ÷Ö÷Ä, ’®’Ω’ø ’°’¥’Ω’°’©’æ’´, ’®’Ω’ø ’™’°’¥’´)
    buttons = [
        [InlineKeyboardButton(text="‘±’º’°’ª’´’Ø’° ’°’¶’°’ø ÷Ö÷Ä", callback_data="SV_free")],
        [InlineKeyboardButton(text="’ì’∂’ø÷Ä’•’¨ ’®’Ω’ø ’°’¥’Ω’°’©’æ’´", callback_data="SV_date")],
        [InlineKeyboardButton(text="’ì’∂’ø÷Ä’•’¨ ’®’Ω’ø ’™’°’¥’´", callback_data="SV_time")],
        [InlineKeyboardButton(text="üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="CHANGE_BRANCH")]  # ’©’∏÷Ç’µ’¨ ’ø’°’¨ ’æ’•÷Ä’°’§’°’º’∂’°’¨ ’¢’°’™’∂’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
    ]
    branch_name = context.user_data.get("branch_name", "’®’∂’ø÷Ä÷Ä’æ’°’Æ ’¢’°’™’´’∂")
    exam_text = "’ø’•’Ω’°’Ø’°’∂" if exam_type == "theory" else "’£’∏÷Ä’Æ’∂’°’Ø’°’∂"
    await query.edit_message_text(
        f"‘∏’∂’ø÷Ä’°’Æ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’ù {branch_name}, {exam_text} ÷Ñ’∂’∂’∏÷Ç’©’µ’∏÷Ç’∂÷â\n"
        "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨desired ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’®‚Ä§",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‘æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ (’∏÷Ä’∏’∂’¥’°’∂ ’ø’´’∫’´) ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ callback"""
    query = update.callback_query
    await query.answer()
    service = query.data  # "SV_free", "SV_date" ’Ø’°’¥ "SV_time"
    branch_id = context.user_data.get("branch_id")
    exam_type = context.user_data.get("exam_type")
    branch_name = context.user_data.get("branch_name", "")
    if not branch_id or not exam_type:
        # ‘µ’©’• ’´’∂’π-’∏÷Ä ’ø’æ’µ’°’¨ ’π’Ø’°, ’§’°’§’°÷Ä’•÷Å’∂’•’¨
        await query.edit_message_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’°’≠ ’®’∂’ø÷Ä’•’¨ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’∂ ’∏÷Ç ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®÷â")
        return
    # ‘ø’°’≠’æ’°’Æ ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’´÷Å’ù ’Ø’°’¥ ’°’∂’¥’´’ª’°’∫’•’Ω ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ ÷Å’∏÷Ç’µ÷Å ’ø’°’¨, ’Ø’°’¥ ’∞’°÷Ä÷Å’∂’•’¨ ’¨÷Ä’°÷Å’∏÷Ç÷Å’´’π info (’°’¥’Ω’°’©’´’æ/’™’°’¥)
    if service == "SV_free":
        # ‘±’º’°’ª’´’Ø’° ’°’¶’°’ø ÷Ö÷Ä’æ’° ÷á ’™’°’¥’´ ’∏÷Ä’∏’∂’∏÷Ç’¥
        availability = context.bot_data.get("availability", {})
        result_text = "’Ü’•÷Ä’Ø’° ’∫’°’∞’´’∂ ’ø’æ’µ’°’¨ ’¢’°’™’∂’´ ’∞’°’¥’°÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä ’°’º’Ø’° ’π’•’∂÷â"
        # ’ç’ø’∏÷Ç’£’•’¨ availability-’∏÷Ç’¥ ’ø’æ’µ’°’¨ branch/exam-’´ info
        branch_key = branch_name  # ’¥’•’∂÷Ñ availability-’´ ’¥’•’ª ’∫’°’∞’∏÷Ç’¥ ’•’∂÷Ñ branch ’°’∂’∏÷Ç’∂’∏’æ (’°’∂’£’¨’•÷Ä’•’∂ ’Ø’°’¥ ’∞’°’µ’•÷Ä’•’∂)
        exam_key = exam_type  # "theory" ’Ø’°’¥ "practical"
        if branch_key in availability and exam_key in availability[branch_key]:
            slots_by_date = availability[branch_key][exam_key]  # ’Ω’° dictionary ’ß date -> [times]
            if slots_by_date:
                # ‘≥’ø’∂’•’¨ ’°’¥’•’∂’°÷É’∏÷Ñ÷Ä (’∞’∏÷Ç’∂’°’æ’°’¶’∂) ’°’¥’Ω’°’©’´’æ’®
                next_date = min(slots_by_date.keys())
                times = slots_by_date[next_date]
                if times:
                    next_time = min(times)  # ’æ’•÷Ä÷Å’∂’•’¨ ’°’º’°’æ’∏’ø’µ’°’∂ ’°’¥’•’∂’°’æ’°’≤ ’™’°’¥’®
                    date_str = next_date.strftime("%d.%m.%Y")
                    result_text = f"‘±’º’°’ª’´’Ø’° ’°’¶’°’ø ’Ω’¨’∏’©’®’ù {date_str} - ’™’°’¥’® {next_time}÷â"
            else:
                result_text = "‘±’¶’°’ø ’Ω’¨’∏’©’•÷Ä ‡§´‡§ø‡§≤‡§π‡§æ‡§≤ ’∞’°’Ω’°’∂’•’¨’´ ’π’•’∂ ’°’µ’Ω ’¢’°’™’∂’´ ’∞’°’¥’°÷Ä÷â"
        await query.edit_message_text(result_text)
        # ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’® ÷Å’∏÷Ç÷Å’°’§÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’°’º’°’ª’°÷Ä’Ø’•’¨ ’∂’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’Ø’°’¥ ’°’æ’°÷Ä’ø
        await update.effective_chat.send_message(
            "üîé ‘ø’°’ø’°÷Ä’•’¨ ’∂’∏’û÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥, ’©’• ’°’æ’°÷Ä’ø’•’¨÷â",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(text="’Ü’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’Ω’Ø’Ω’•’¨", callback_data="CHANGE_BRANCH")]
            ])
        )
    elif service == "SV_date":
        # ’Ä’°÷Ä÷Å’∂’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’® ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’°’¥’Ω’°’©’´’æ
        context.user_data["expected"] = "date"
        # ’ä’°’∞’∫’°’∂’•’¨, ’∏÷Ä ’Ω’∫’°’Ω’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’Ω’°’©’´’æ (’∏÷Ä’∫’•’Ω ’ø’•÷Ñ’Ω’ø)
        await query.edit_message_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’∏÷Ä’∏’∂’æ’∏’≤ ’°’¥’Ω’°’©’´’æ’®’ù ’±÷á’°’π’°÷É’∏’æ ’ï’ï.‘±‘±‘±‘± (÷Ö÷Ä’´’∂’°’Ø’ù 15.09.2025)÷â")
    elif service == "SV_time":
        context.user_data["expected"] = "time"
        await query.edit_message_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’∏÷Ä’∏’∂’æ’∏’≤ ’™’°’¥’®’ù ’±÷á’°’π’°÷É’∏’æ ‘∫‘∫:’ê’ê (÷Ö÷Ä’´’∂’°’Ø’ù 09:30)÷â")
    elif service == "CHANGE_BRANCH":
        # ’ï’£’ø’°’ø’•÷Ä’® ’∏÷Ä’∏’∑’•’¨ ’ß ’æ’•÷Ä’°’§’°’º’∂’°’¨ ’¢’°’™’∂’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ ÷É’∏÷Ç’¨
        await query.edit_message_text(
            "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’®‚Ä§",
            reply_markup=InlineKeyboardMarkup(generate_branch_buttons())
        )
    else:
        # ‘±’∂’≥’°’∂’°’π ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂
        await query.edit_message_text("‘∏’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’´ ’≥’°’∂’°’π’æ’∏÷Ç’¥÷â")

async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫ ’Ø’∏’≥’°’Ø’´ callback"""
    query = update.callback_query
    await query.answer()
    # ’ï’£’ø’°’ø’´÷Ä’∏’ª’® ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’∏÷Ç’∑’∏÷Ç’¥’ù ’£÷Ä’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®
    await query.edit_message_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£÷Ä’•’¨ ’Å’•÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’§’¥’´’∂’´’∂ ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
    # ’ç’°’∞’¥’°’∂’•’¨ state, ’∏÷Ä ’Ω’∫’°’Ω’æ’∏÷Ç’¥ ’ß feedback ’ø’•÷Ñ’Ω’ø
    context.user_data["expected"] = "feedback"

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Message handler ’®’∂’§’∏÷Ç’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä text input (feedback, date, time)"""
    user_text = update.message.text
    expected = context.user_data.get("expected")
    if not expected:
        # ‘µ’©’• ’π’Ø’°’∂ ’°’Ø’∂’Ø’°’¨’æ’∏’≤ ’ø’æ’µ’°’¨’∂’•÷Ä, ’£’∏÷Ç÷Å’• ÷Ö’£’ø’°’ø’•÷Ä’® ’∏÷Ç’≤’≤’°’Ø’´ ’£÷Ä’•’¨ ’ß ’´’∂’π-’∏÷Ä ’¢’°’∂ ’°’∂’ø’•’≤’´
        # ’è’æ’µ’°’¨ ’§’•’∫÷Ñ’∏÷Ç’¥ ’∫’°÷Ä’¶’°’∫’•’Ω ’°’º’°’ª’°÷Ä’Ø’•’∂÷Ñ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ /start ’Ø’°’¥ ’®’∂’ø÷Ä’°÷Å’°’∂’Ø
        await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’∫’°’∞’°’∂’ª’æ’∏’≤ ’ø’°÷Ä’¢’•÷Ä’°’Ø’® ’®’∂’ø÷Ä’°÷Å’°’∂’Ø’´÷Å (/start).")
        return

    if expected == "feedback":
        # ’ï’£’ø’°’ø’´÷Ä’∏’ª feedback ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’º’Ø’° ’ß user_text-’∏÷Ç’¥
        # ’ä’°’ø÷Ä’°’Ω’ø’•’¨ admin-’´’∂ ’∏÷Ç’≤’°÷Ä’Ø’æ’∏’≤ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®
        user = update.effective_user
        phone = context.user_data.get("phone", "")
        admin_text = f"Feedback from {user.first_name} {user.last_name or ''} (phone: {phone}):\n{user_text}"
        if ADMIN_CHAT_ID:
            try:
                # ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’§’¥’´’∂’´’∂
                await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=admin_text)
            except Exception as e:
                logger.error(f"Failed to send feedback to admin: {e}")
        # ’Ä’°’Ω’ø’°’ø’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®
        await update.message.reply_text("’Å’•÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’∞’•’ø’°’§’°÷Ä’± ’Ø’°’∫’´ ’∞’°’¥’°÷Ä÷â")
        # ’Ñ’°÷Ñ÷Ä’•’¨ expected ’§÷Ä’∏’∑’°’Ø’®
        context.user_data["expected"] = None
        # ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’®’∂’ø÷Ä’°÷Å’°’∂’Ø’´ (’¢’°’™’∂’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂) ÷É’∏÷Ç’¨
        await update.message.reply_text(
            "’é’•÷Ä’°’§’°’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’®’∂’ø÷Ä’°÷Å’°’∂’Ø÷â ‘∏’∂’ø÷Ä’•÷Ñ ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’∏÷Ç’¥’®‚Ä§",
            reply_markup=InlineKeyboardMarkup(generate_branch_buttons())
        )
    elif expected == "date":
        # ’ï’£’ø’°’ø’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’ß ’°’¥’Ω’°’©’´’æ ’∏÷Ä’∏’∂’¥’°’∂ ’∞’°’¥’°÷Ä
        query_date_str = user_text.strip()
        # ’ì’∏÷Ä’±’•’¨ ’æ’•÷Ä’°÷É’∏’≠’•’¨ date ’±÷á’°’π’°÷É’´
        try:
            # ‘∏’∂’§’∏÷Ç’∂’∏÷Ç’¥ ’•’∂÷Ñ ’±÷á’°’π’°÷É’® ’ï’ï.‘±‘±.’è’è’è’è ’Ø’°’¥ ‘±‘±‘±‘±-‘±‘±-’ï’ï
            if "." in query_date_str:
                query_date = datetime.strptime(query_date_str, "%d.%m.%Y").date()
            elif "-" in query_date_str:
                query_date = datetime.strptime(query_date_str, "%Y-%m-%d").date()
            else:
                raise ValueError("Unknown date format")
        except Exception as e:
            await update.message.reply_text("’Ü’•÷Ä’¥’∏÷Ç’Æ’æ’°’Æ ’°’¥’Ω’°’©’æ’´ ’±÷á’°’π’°÷É’® ’Ω’≠’°’¨ ’ß÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ’Ø÷Ä’Ø’´’∂’ù ’ï’ï.‘±‘±.’è’è’è’è ’±÷á’°’π’°÷É’∏’æ÷â")
            return
        # ’ì’∂’ø÷Ä’•’¨ ’ø’æ’µ’°’¨ ’°’¥’Ω’°’©’æ’´ ’∞’°’Ω’°’∂’•’¨’´ ’Ω’¨’∏’©’•÷Ä’®
        branch_name = context.user_data.get("branch_name", "")
        exam_type = context.user_data.get("exam_type", "")
        availability = context.bot_data.get("availability", {})
        result_text = ""
        branch_key = branch_name
        exam_key = exam_type
        if branch_key in availability and exam_key in availability[branch_key]:
            slots_by_date = availability[branch_key][exam_key]
            # ’à÷Ä’∏’∂’•’¨ query_date-’® slots_by_date keys-’∏÷Ç’¥
            if query_date in slots_by_date:
                times = slots_by_date[query_date]
                if times:
                    times_str = ", ".join(times)
                    date_str = query_date.strftime("%d.%m.%Y")
                    result_text = f"{date_str} ÷Ö÷Ä’∂ ’°’¶’°’ø ’•’∂ ’∞’•’ø÷á’µ’°’¨ ’™’°’¥’•÷Ä’®’ù {times_str}"
                else:
                    result_text = f"{query_date_str} ÷Ö÷Ä’∂ ÿ¢ÿ≤ÿßÿØ ’™’°’¥’•÷Ä ’∞’°’Ω’°’∂’•’¨’´ ’π’•’∂÷â"
            else:
                result_text = f"{query_date_str} ÷Ö÷Ä’∂ ’ø’æ’µ’°’¨ ’¢’°’™’∂’´ ’∞’°’¥’°÷Ä ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â"
        else:
            result_text = "’è’æ’µ’°’¨’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’π’•’∂ ’Ø’°’¥ ’ø’æ’µ’°’¨ ’¢’°’™’∂’´/÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’∞’°’µ’ø’∂’´ ’π’ß÷â"
        await update.message.reply_text(result_text)
        # ’Ñ’°÷Ñ÷Ä’•’¨ state-’® ÷á ’°’º’°’ª’°÷Ä’Ø’•’¨ ’∂’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥
        context.user_data["expected"] = None
        await update.message.reply_text(
            "üîé ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’Ø’°’ø’°÷Ä’•’¨ ’∂’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’Ø’°’¥ ÷É’∏’≠’•’¨ ’¢’°’™’´’∂’®÷â",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(text="’Ü’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’Ω’Ø’Ω’•’¨", callback_data="CHANGE_BRANCH")]
            ])
        )
    elif expected == "time":
        # ’ï’£’ø’°’ø’´÷Ä’∏’ª ’∏÷Ç’≤’°÷Ä’Ø’°’Æ ’™’°’¥’´ ’¥’∑’°’Ø’∏÷Ç’¥’®
        query_time_str = user_text.strip()
        # Validate ’±÷á’°’π’°÷É ‘∫‘∫:’ê’ê
        try:
            query_time = datetime.strptime(query_time_str, "%H:%M").time()
        except Exception:
            await update.message.reply_text("‘∫’°’¥’® ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£÷Ä’•’¨ ‘∫‘∫:’ê’ê ’±÷á’°’π’°÷É’∏’æ (÷Ö÷Ä’´’∂’°’Ø’ù 07:30):")
            return
        # ’à÷Ä’∏’∂’•’¨ ’°’µ’§ ’™’°’¥’∏’æ ÷Ö÷Ä’•÷Ä’®
        branch_name = context.user_data.get("branch_name", "")
        exam_type = context.user_data.get("exam_type", "")
        availability = context.bot_data.get("availability", {})
        branch_key = branch_name
        exam_key = exam_type
        found_dates = []
        if branch_key in availability and exam_key in availability[branch_key]:
            slots_by_date = availability[branch_key][exam_key]
            for date_obj, times in slots_by_date.items():
                # times ÷Å’∏÷Ç÷Å’°’Ø’∏÷Ç’¥ ("HH:MM") ’£’ø’∂’•’¨ query_time_str
                if query_time_str in times:
                    found_dates.append(date_obj)
        if found_dates:
            # Sort the dates
            found_dates.sort()
            dates_str = ", ".join([d.strftime("%d.%m.%Y") for d in found_dates])
            result_text = f"‘∫’°’¥’® {query_time_str}-’´’∂ ’∞’°’Ω’°’∂’•’¨’´ ’ß ’∞’•’ø÷á’µ’°’¨ ÷Ö÷Ä’•÷Ä’´’∂’ù {dates_str}"
        else:
            result_text = f"‘∫’°’¥’® {query_time_str}-’´’∂ ’°’º’°’ª’´’Ø’°’µ’∏÷Ç’¥ ’°’¶’°’ø ÷Ö÷Ä’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨÷â"
        await update.message.reply_text(result_text)
        context.user_data["expected"] = None
        await update.message.reply_text(
            "üîé ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’∏÷Ä’∏’∂’•’¨ ’Ø÷Ä’Ø’´’∂ ’Ø’°’¥ ’®’∂’ø÷Ä’•’¨ ’°’µ’¨ ’¢’°’™’´’∂‚Ä§",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(text="’Ü’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’Ω’Ø’Ω’•’¨", callback_data="CHANGE_BRANCH")]
            ])
        )
    else:
        # ’à’π ’¥’´ –æ—á–∞–∫’æ’°’Æ state-’´’∂ ’π’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏’≤ ’ø’•÷Ñ’Ω’ø
        await update.message.reply_text("’â’∞’°’ª’∏’≤’æ’•÷Å ’¥’∑’°’Ø’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®÷â")

# Background task: Data refresh every 2 hours
async def refresh_data_job(context: ContextTypes.DEFAULT_TYPE):
    """’ä’°÷Ä’¢’•÷Ä’°’¢’°÷Ä ’Ø’°’∂’π’æ’∏’≤ task’ù ’©’°÷Ä’¥’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä availability ’ø’æ’µ’°’¨’∂’•÷Ä’®"""
    logger.info("Refreshing availability data from roadpolice.am...")
    try:
        new_data = fetch_availability()  # ’Ø’°’∂’π’•’¨ scraper.py-’´ ’∞’´’¥’∂’°’Ø’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂
        # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä data-’®
        context.bot_data["availability"] = new_data
        logger.info("Availability data refreshed successfully.")
    except Exception as e:
        logger.error(f"Data refresh failed: {e}")

def main():
    # ’ç’ø’•’≤’Æ’•’¨ Application (python-telegram-bot v20+)
    application = Application.builder().token(BOT_TOKEN).build()

    # ‘≥÷Ä’°’∂÷Å’•’¨ handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    # CallbackQueryHandlers for branch, exam, service, feedback
    application.add_handler(CallbackQueryHandler(branch_callback, pattern=r"^BR_"))
    application.add_handler(CallbackQueryHandler(exam_callback, pattern=r"^EX_"))
    application.add_handler(CallbackQueryHandler(service_callback, pattern=r"^SV_|CHANGE_BRANCH"))
    application.add_handler(CallbackQueryHandler(feedback_callback, pattern=r"^FB$"))
    # Message handler for expected text inputs (date/time/feedback)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # ’ç’Ø’Ω’•’¨ background job for data refresh (every 2 hours)
    # First immediate run on startup to populate data
    application.job_queue.run_once(refresh_data_job, when=0)
    # Then run every 2 hours (7200 seconds)
    application.job_queue.run_repeating(refresh_data_job, interval=7200, first=7200)

    logger.info("Bot is starting...")
    # ‘∂’°÷Ä’£’°÷Å’∂’•’¨ polling-’®
    application.run_polling()

if __name__ == "__main__":
    main()
