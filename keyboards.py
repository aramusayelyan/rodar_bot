# -*- coding: utf-8 -*-
from typing import List, Tuple
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

def exam_type_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["’è’•’Ω’°’Ø’°’∂", "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂"]], resize_keyboard=True, one_time_keyboard=True)

def filter_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä", "‘∏’Ω’ø ’°’¥’Ω’°’©’æ’´"],
        ["‘∏’Ω’ø ’™’°’¥’´", "’á’°’¢’°’©’æ’° ÷Ö÷Ä’∏’æ"],
        ["‘≤’∏’¨’∏÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’®"]
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

def weekdays_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["‘µ÷Ä’Ø’∏÷Ç’∑’°’¢’©’´", "‘µ÷Ä’•÷Ñ’∑’°’¢’©’´", "’â’∏÷Ä’•÷Ñ’∑’°’¢’©’´"],
        ["’Ä’´’∂’£’∑’°’¢’©’´", "’à÷Ç÷Ä’¢’°’©", "’á’°’¢’°’©"],
        ["‘ø’´÷Ä’°’Ø’´"]
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

def list_keyboard_from_pairs(pairs: List[Tuple[str, str]], cols: int = 2) -> ReplyKeyboardMarkup:
    labels = [p[0] for p in pairs]
    rows = [labels[i:i+cols] for i in range(0, len(labels), cols)]
    if not rows:
        rows = [["‚Äî ÷Å’∏÷Ç÷Å’°’Ø ’§’°’ø’°÷Ä’Ø ‚Äî"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

def slot_inline_keyboard(slots: List[dict]) -> InlineKeyboardMarkup:
    buttons = []
    for s in slots:
        label = s.get("label") or s.get("time") or s.get("value") or "’™’°’¥"
        value = s.get("value") or label
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"slot|{value}")])
    buttons.append([InlineKeyboardButton("üîî ’Ñ’´’°÷Å’∂’•’¨ ’∞’•’ø÷á’∏÷Ç’¥’®", callback_data="follow|on")])
    buttons.append([InlineKeyboardButton("’â’•’≤’°÷Ä’Ø’•’¨", callback_data="cancel")])
    return InlineKeyboardMarkup(buttons)

def confirm_follow_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî ’Ñ’´’°÷Å’∂’•’¨ ’∞’•’ø÷á’∏÷Ç’¥’®", callback_data="follow|on")],
        [InlineKeyboardButton("’â’•’≤’°÷Ä’Ø’•’¨", callback_data="cancel")]
    ])

def filter_services_by_exam(services: List[Tuple[str, str]], exam: str) -> List[Tuple[str, str]]:
    if not services:
        return []
    key = "’ø’•’Ω’°’Ø’°’∂" if exam == "’è’•’Ω’°’Ø’°’∂" else "’£’∏÷Ä’Æ’∂’°’Ø’°’∂"
    filtered = [p for p in services if key in p[0].lower()]
    return filtered or services
