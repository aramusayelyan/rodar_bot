# -*- coding: utf-8 -*-
import logging
import os
from datetime import date
from typing import Dict, Any, Tuple, List, Optional

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (Updater, CommandHandler, MessageHandler, CallbackQueryHandler,
                          Filters, ConversationHandler, CallbackContext)

import config
import database as db
import scraper
import keyboards
import requests

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Conversation states
ASK_PHONE, ASK_SOCIAL, SEARCH_EXAM, SEARCH_SERVICE, SEARCH_BRANCH, SEARCH_FILTER, \
ASK_DATE, ASK_HOUR, ASK_WEEKDAY, WAIT_SLOT_SELECT, ASK_EMAIL = range(11)

def get_user_state(context: CallbackContext) -> Dict[str, Any]:
    if "tmp" not in context.user_data:
        context.user_data["tmp"] = {}
    return context.user_data["tmp"]

def get_session_for_user(user_id: int) -> Tuple[requests.Session, str]:
    u = db.get_user(user_id)
    if u and u.get("cookies"):
        return scraper.ensure_session(u["cookies"])
    return scraper.new_session()

def save_session_cookies(user_id: int, sess: requests.Session):
    try:
        db.save_cookies(user_id, scraper.cookies_to_dict(sess.cookies))
    except Exception as e:
        logger.warning("save_session_cookies failed: %s", e)

def filter_services_by_exam(services: List[Tuple[str, str]], exam: str) -> List[Tuple[str, str]]:
    exam = exam.strip()
    if exam == "’è’•’Ω’°’Ø’°’∂":
        keys = ["’ø’•’Ω’°’Ø’°’∂", "theory"]
    else:
        keys = ["’£’∏÷Ä’Æ’∂’°’Ø’°’∂", "practical"]
    out = []
    for lab, val in services:
        low = lab.lower()
        if any(k in low for k in keys):
            out.append((lab, val))
    return out or services

# ========== Error handler ==========
def error_handler(update: Optional[Update], context: CallbackContext):
    logger.exception("Unhandled error", exc_info=context.error)
    try:
        if update and update.effective_chat:
            context.bot.send_message(update.effective_chat.id, "‚ö†Ô∏è ’è’•’≠’∂’´’Ø’°’Ø’°’∂ ’Ω’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ’Ø÷Ä’Ø’´’∂÷â")
    except Exception:
        pass

# ========== /start ==========
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    context.user_data.clear()
    update.message.reply_text(
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø, {user.first_name if user and user.first_name else '÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤'} üëã\n"
        "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ø’´’Ω’æ’•÷Ñ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ’ù ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’Ω", request_contact=True)]],
            resize_keyboard=True, one_time_keyboard=True)
    )
    return ASK_PHONE

def got_phone(update: Update, context: CallbackContext):
    c = update.message.contact
    if not c or not c.phone_number:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’•’≤’¥’•’¨ ¬´üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’Ω¬ª ’Ø’∏’≥’°’Ø’®÷â")
        return ASK_PHONE
    st = get_user_state(context)
    st["phone"] = c.phone_number
    update.message.reply_text("’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’Å’•÷Ä ’Ω’∏÷Å’´’°’¨’°’Ø’°’∂ ÷Ñ’°÷Ä’ø’´ ’∞’°’¥’°÷Ä’® (’Ä‘æ’Ä, 10 ’©’æ’°’∂’∑’°’∂)÷â",
                              reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True))
    return ASK_SOCIAL

def got_social(update: Update, context: CallbackContext):
    social = update.message.text.strip()
    if not social.isdigit():
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’¥’´’°’µ’∂ ’©’æ’•÷Ä’´÷Å ’¢’°’≤’Ø’°÷Å’°’Æ ’Ä‘æ’Ä (÷Ö÷Ä. 1234567890)÷â")
        return ASK_SOCIAL
    st = get_user_state(context)
    st["social"] = social
    user_id = update.effective_user.id

    sess, _ = scraper.new_session()
    db.upsert_user(user_id=user_id, phone=st["phone"], social=social, cookies=scraper.cookies_to_dict(sess.cookies))
    update.message.reply_text("‘≥÷Ä’°’∂÷Å’∏÷Ç’¥’∂ ’°’æ’°÷Ä’ø’æ’•÷Å ‚úÖ\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ ’∏÷Ä’∏’∂’∏÷Ç’¥’®’ù /search")
    return ConversationHandler.END

# ========== /search ==========
def search_cmd(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        sess, _ = get_session_for_user(user_id)
    except Exception:
        sess, _ = scraper.new_session()

    branches, services = scraper.get_branch_and_services(sess)
    save_session_cookies(user_id, sess)

    st = get_user_state(context)
    st["branches"] = branches
    st["services_all"] = services
    st["chosen"] = {}

    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®‚Ä§", reply_markup=keyboards.exam_type_keyboard())
    return SEARCH_EXAM

def picked_exam(update: Update, context: CallbackContext):
    exam = update.message.text.strip()
    if exam not in ("’è’•’Ω’°’Ø’°’∂", "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂"):
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ¬´’è’•’Ω’°’Ø’°’∂¬ª ’Ø’°’¥ ¬´‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂¬ª÷â")
        return SEARCH_EXAM
    st = get_user_state(context)
    st["chosen"]["exam"] = exam
    services_all: List[Tuple[str, str]] = st.get("services_all", [])
    services = filter_services_by_exam(services_all, exam)
    st["services"] = services
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’®‚Ä§", reply_markup=keyboards.list_keyboard_from_pairs(services, cols=2))
    return SEARCH_SERVICE

def picked_service(update: Update, context: CallbackContext):
    label = update.message.text.strip()
    st = get_user_state(context)
    pair = next(((lab, val) for lab, val in st.get("services", []) if lab == label), None)
    if not pair:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ÷Å’∏÷Ç÷Å’°’Ø’´÷Å÷â")
        return SEARCH_SERVICE
    st["chosen"]["service_label"], st["chosen"]["service_id"] = pair
    branches: List[Tuple[str, str]] = st.get("branches", [])
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’®‚Ä§", reply_markup=keyboards.list_keyboard_from_pairs(branches, cols=1))
    return SEARCH_BRANCH

def picked_branch(update: Update, context: CallbackContext):
    label = update.message.text.strip()
    st = get_user_state(context)
    pair = next(((lab, val) for lab, val in st.get("branches", []) if lab == label), None)
    if not pair:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ÷Å’∏÷Ç÷Å’°’Ø’´÷Å÷â")
        return SEARCH_BRANCH
    st["chosen"]["branch_label"], st["chosen"]["branch_id"] = pair
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ü’´’¨’ø÷Ä’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®‚Ä§", reply_markup=keyboards.filter_keyboard())
    return SEARCH_FILTER

def picked_filter(update: Update, context: CallbackContext):
    choice = update.message.text.strip()
    st = get_user_state(context)
    st["filter"] = choice

    if choice == "‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä":
        return do_nearest(update, context)
    elif choice == "‘∏’Ω’ø ’°’¥’Ω’°’©’æ’´":
        update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® `’ï’ï-‘±‘±-’è’è’è’è` (÷Ö÷Ä. 25-08-2025)÷â")
        return ASK_DATE
    elif choice == "‘∏’Ω’ø ’™’°’¥’´":
        update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’™’°’¥’® `‘∫‘∫:’ê’ê` (÷Ö÷Ä. 09:00)÷â")
        return ASK_HOUR
    elif choice == "’á’°’¢’°’©’æ’° ÷Ö÷Ä’∏’æ":
        update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®‚Ä§", reply_markup=keyboards.weekdays_keyboard())
        return ASK_WEEKDAY
    elif choice == "‘≤’∏’¨’∏÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’®":
        return do_all_days(update, context)
    else:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’∞’°’Ω’°’∂’•’¨’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä’´÷Å÷â")
        return SEARCH_FILTER

def do_nearest(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    st = get_user_state(context)
    branch_id = st["chosen"]["branch_id"]
    service_id = st["chosen"]["service_id"]
    sess, _ = get_session_for_user(user_id)
    day, slots = scraper.nearest_day(sess, branch_id, service_id, "")
    save_session_cookies(user_id, sess)
    if not day:
        update.message.reply_text("‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä ’π’´ ’£’ø’∂’æ’•’¨÷â ’ì’∏÷Ä’±’•÷Ñ ’°’µ’¨ ÷Ü’´’¨’ø÷Ä÷â")
        return ConversationHandler.END
    context.user_data["last_nearest"] = day
    st["chosen"]["date"] = day
    if not slots:
        slots = scraper.slots_for_day(sess, branch_id, service_id, day)
    if slots:
        st["chosen"]["slots"] = slots
        update.message.reply_text(f"‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä’®’ù {day}\n‘∏’∂’ø÷Ä’•÷Ñ ’™’°’¥’•÷Ä’´÷Å ’¥’•’Ø’®’ù",
                                  reply_markup=keyboards.slot_inline_keyboard(slots))
        return WAIT_SLOT_SELECT
    else:
        update.message.reply_text(f"’ï÷Ä’ù {day}\n’ç’°’Ø’°’µ’∂ ’ø’æ’µ’°’¨ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â")
        return ConversationHandler.END

def do_all_days(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    st = get_user_state(context)
    branch_id = st["chosen"]["branch_id"]
    service_id = st["chosen"]["service_id"]
    sess, _ = get_session_for_user(user_id)
    today = date.today()
    base = f"{today.day:02d}-{today.month:02d}-{today.year}"
    disabled = scraper.slots_for_month(sess, branch_id, service_id, base)
    save_session_cookies(user_id, sess)
    txt = "‘±’∂’°’∑’≠’°’ø ÷Ö÷Ä’•÷Ä (’°’¥’Ω’°’µ’´’∂ ÷Å’∏÷Ç÷Å’°’Ø’´÷Å)’ù " + (", ".join(disabled) if disabled else "‚Äî")
    update.message.reply_text(txt)
    return ConversationHandler.END

def got_date(update: Update, context: CallbackContext):
    dt = update.message.text.strip()
    st = get_user_state(context)
    st["chosen"]["date"] = dt
    user_id = update.effective_user.id
    sess, _ = get_session_for_user(user_id)
    slots = scraper.slots_for_day(sess, st["chosen"]["branch_id"], st["chosen"]["service_id"], dt)
    save_session_cookies(user_id, sess)
    if slots:
        st["chosen"]["slots"] = slots
        update.message.reply_text("’Ä’°’Ω’°’∂’•’¨’´ ’™’°’¥’•÷Ä‚Ä§",
                                  reply_markup=keyboards.slot_inline_keyboard(slots))
        return WAIT_SLOT_SELECT
    update.message.reply_text("’è’æ’µ’°’¨ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â")
    return ConversationHandler.END

def got_hour(update: Update, context: CallbackContext):
    # ’∫’°÷Ä’¶ ’ø’°÷Ä’¢’•÷Ä’°’Ø’ù ’°’º’°’ª’´’∂ ’¥’∏’ø ÷Ö÷Ä’æ’° ’¥’•’ª ÷É’∂’ø÷Ä’•’¨ ’°’µ’§ ’™’°’¥’®
    hr = update.message.text.strip()
    st = get_user_state(context)
    st["chosen"]["hour"] = hr
    return do_nearest(update, context)

def got_weekday(update: Update, context: CallbackContext):
    # ’∫’°÷Ä’¶’•÷Å’æ’°’Æ’ù ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä’®
    return do_nearest(update, context)

def slot_clicked(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    if data.startswith("slot|"):
        slot_value = data.split("|", 1)[1]
        st = get_user_state(context)
        st["chosen"]["slot_time"] = slot_value
        query.edit_message_text(f"‘∏’∂’ø÷Ä’æ’°’Æ ’™’°’¥’ù {slot_value}\n’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Å’•÷Ä email-’® ’°’¥÷Ä’°’£÷Ä’¥’°’∂ ’∞’°’¥’°÷Ä÷â")
        return ASK_EMAIL
    elif data.startswith("follow|on"):
        st = get_user_state(context)
        user_id = update.effective_user.id
        db.upsert_tracker(user_id, st["chosen"]["service_id"], st["chosen"]["branch_id"],
                          last_best_date=context.user_data.get("last_nearest"))
        query.edit_message_text("üîî ’Ä’•’ø÷á’∏÷Ç’¥’® ’¥’´’°÷Å’æ’°’Æ ’ß÷â")
        return ConversationHandler.END
    elif data == "cancel":
        query.edit_message_text("’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
        return ConversationHandler.END
    return ConversationHandler.END

def ask_email_done(update: Update, context: CallbackContext):
    email = update.message.text.strip()
    st = get_user_state(context)
    st["chosen"]["email"] = email
    user_id = update.effective_user.id

    sess, _ = get_session_for_user(user_id)
    try:
        res = scraper.register(sess,
                               st["chosen"]["branch_id"],
                               st["chosen"]["service_id"],
                               st["chosen"]["date"],
                               st["chosen"]["slot_time"],
                               email)
        save_session_cookies(user_id, sess)
        pin = res.get("pin") or "‚Äî"
        update.message.reply_text(f"‚úÖ ‘≥÷Ä’°’∂÷Å’∏÷Ç’¥’∂ ’°’æ’°÷Ä’ø’æ’•÷Å\nPIN: {pin}")
        update.message.reply_text("’ç’Ø’Ω’•’û’¨ ’∞’•’ø÷á’•’¨ ’°’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä’æ’°’∂ ’°’µ’Ω ’¢’°’™’∂’´/’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä:",
                                  reply_markup=keyboards.confirm_follow_keyboard())
        return WAIT_SLOT_SELECT
    except Exception as e:
        update.message.reply_text(f"‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’£÷Ä’°’∂÷Å’∏÷Ç’¥’®. {e}")
        return ConversationHandler.END

# ======== tracking (global) ========
def tracker_poll(context: CallbackContext):
    try:
        trackers = db.get_all_trackers()
        if not trackers:
            return
        bot = context.bot
        for t in trackers:
            user_id = t.get("user_id")
            branch_id = t.get("branch_id")
            service_id = t.get("service_id")
            last = t.get("last_best_date")
            if not (user_id and branch_id and service_id):
                continue
            sess, _ = get_session_for_user(user_id)
            day, slots = scraper.nearest_day(sess, branch_id, service_id, "")
            save_session_cookies(user_id, sess)
            if day and (last is None or day < last):
                # found closer day
                msg = f"üîî ‘≥’ø’∂’æ’•÷Å ’°’æ’•’¨’´ ’¥’∏’ø ÷Ö÷Ä’ù {day} ({t.get('branch_id')})\n/search ’∞÷Ä’°’¥’°’∂’∏’æ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’°’¥÷Ä’°’£÷Ä’•’¨÷â"
                try:
                    bot.send_message(chat_id=user_id, text=msg)
                except Exception:
                    pass
                db.update_tracker_last_date(user_id, service_id, branch_id, day)
    except Exception as e:
        logger.warning("tracker_poll error: %s", e)

# ======== cancel ========
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’§’°’§’°÷Ä’•÷Å’æ’•÷Å÷â")
    return ConversationHandler.END

def main():
    updater = Updater(token=config.BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    start_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHONE: [MessageHandler(Filters.contact, got_phone)],
            ASK_SOCIAL: [MessageHandler(Filters.text & ~Filters.command, got_social)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    dp.add_handler(start_conv)

    search_conv = ConversationHandler(
        entry_points=[CommandHandler("search", search_cmd)],
        states={
            SEARCH_EXAM: [MessageHandler(Filters.text & ~Filters.command, picked_exam)],
            SEARCH_SERVICE: [MessageHandler(Filters.text & ~Filters.command, picked_service)],
            SEARCH_BRANCH: [MessageHandler(Filters.text & ~Filters.command, picked_branch)],
            SEARCH_FILTER: [MessageHandler(Filters.text & ~Filters.command, picked_filter)],
            ASK_DATE: [MessageHandler(Filters.text & ~Filters.command, got_date)],
            ASK_HOUR: [MessageHandler(Filters.text & ~Filters.command, got_hour)],
            ASK_WEEKDAY: [MessageHandler(Filters.text & ~Filters.command, got_weekday)],
            WAIT_SLOT_SELECT: [CallbackQueryHandler(slot_clicked)],
            ASK_EMAIL: [MessageHandler(Filters.text & ~Filters.command, ask_email_done)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    dp.add_handler(search_conv)

    # periodic tracker poll
    updater.job_queue.run_repeating(tracker_poll, interval=config.TRACK_INTERVAL_MINUTES * 60, first=60)

    # --- Webhook mode for Render Free Web Service ---
    webhook_path = config.BOT_TOKEN  # obscure path
    updater.start_webhook(
        listen="0.0.0.0",
        port=config.PORT,
        url_path=webhook_path,
        webhook_url=f"{config.WEBHOOK_BASE_URL.rstrip('/')}/{webhook_path}",
    )
    logger.info("Bot started via webhook on port %s", config.PORT)
    updater.idle()

if __name__ == "__main__":
    main()
