import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters
import config
import keyboards
from scraper import get_free_slots

# ’ç’°’∞’¥’°’∂’•’¨ logger-’®
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ’ç’°’∞’¥’°’∂’•’¨ conversation-’´ ’æ’´’≥’°’Ø’∂’•÷Ä’´ ’Ø’∏’∂’Ω’ø’°’∂’ø’∂’•÷Ä’®
ASK_PHONE, ASK_BRANCH, ASK_EXAM = range(3)

# Start command-’´ handler
async def start(update: Update, context):
    """ /start ’Ω’Ø’Ω’•’¨’∏÷Ç÷Å ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’∏’≤’ª’∏÷Ç’µ’∂ ÷á ’∞’°÷Ä÷Å’∂’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä """
    user = update.effective_user
    await update.message.reply_text(
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø, {user.first_name}÷â\n"
        "‘±’µ’Ω ’¢’∏’ø’® ’Ø÷Ö’£’∂’´ ’Å’•’¶ ’∫’°÷Ä’¶’•’¨ ’æ’°÷Ä’∏÷Ä’§’°’Ø’°’∂ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’∞’•÷Ä’©’°’£÷Ä’¥’°’∂ ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’® ÷á ’™’°’¥’•÷Ä’®÷â\n"
        "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’•’≤’¥’•÷Ñ ’Ω’ø’∏÷Ä÷á ’¢’•÷Ä’æ’°’Æ ’Ø’∏’≥’°’Ø’®’ù ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’ø÷Ä’°’¥’°’§÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
    )
    # ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’≥’°’Ø’ù ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä
    await update.message.reply_text(
        "‚¨áÔ∏è ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä ÷É’∏’≠’°’∂÷Å’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’Ω’•’≤’¥’•÷Ñ ’Ø’∏’≥’°’Ø’®",
        reply_markup=keyboards.phone_request_keyboard()
    )
    return ASK_PHONE

# ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’´ ’Ω’ø’°÷Å’¥’°’∂ handler
async def phone_received(update: Update, context):
    """’ç’ø’°’∂’°’¨ contact ’Ø’°’¥ ’æ’°’∞’°’∂’°’Ø’∏’æ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’æ’°’Æ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä"""
    contact = update.message.contact
    if contact:
        phone_number = contact.phone_number
    else:
        # ‘µ’©’• ÷Ö’£’ø’°’ø’•÷Ä’® ’£÷Ä’°’º’•÷Å ’∏÷Ä’∫’•’Ω ’ø’•÷Ñ’Ω’ø (’∏’π ’©’• share contact), ’æ’•÷Ä÷Å’∂’•’∂÷Ñ ’ø’•÷Ñ’Ω’ø’®
        phone_number = update.message.text
    # ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’∫’°’∞’•’¨ context.user_data dict-’∏÷Ç’¥, ’•’©’• ’∞’•’ø’°’£’°’µ’∏÷Ç’¥ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’´
    context.user_data["phone"] = phone_number
    logger.info("User phone: %s", phone_number)
    # ’Ä’´’¥’° ’°’∂÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ÷Ñ’°’µ’¨’´’∂’ù ’Ω’ø’∏÷Ä’°’¢’°’™’°’∂’¥’°’∂ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
    await update.message.reply_text(
        "’á’°’ø ’¨’°’æ, ’∑’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â ’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ’¥’∏’ø’°’Ø’° ’∞’°’∑’æ’°’º’¥’°’∂-÷Ñ’∂’∂’°’Ø’°’∂ ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’®’ù ’∏÷Ä’ø’•’≤ ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’∞’°’∂’±’∂’•’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’∏÷Ç’∂’®÷â",
        reply_markup=keyboards.branch_keyboard()
    )
    return ASK_BRANCH

# ’ç’ø’∏÷Ä’°’¢’°’™’°’∂’¥’°’∂ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ handler
async def branch_received(update: Update, context):
    """‘∏’∂’§’∏÷Ç’∂’∏÷Ç’¥ ’ß ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’´ ’°’∂’∏÷Ç’∂’® (’∏÷Ä’∫’•’Ω ’ø’•÷Ñ’Ω’ø, ’Ø’∏’≥’°’Ø’´÷Å)"""
    branch = update.message.text
    context.user_data["branch"] = branch
    logger.info("User selected branch: %s", branch)
    # ’Ä’°÷Ä÷Å’∂’•’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂/’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®
    await update.message.reply_text(
        f"‘∏’∂’ø÷Ä’•÷Å’´÷Ñ’ù {branch}÷â ’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’® ’Ø’°’¥ ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ –≤–∏–¥’®÷â",
        reply_markup=keyboards.exam_type_keyboard()
    )
    return ASK_EXAM

# ’î’∂’∂’∏÷Ç’©’µ’°’∂/’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’´ ’Ω’ø’°÷Å’¥’°’∂ handler
async def exam_received(update: Update, context):
    """‘∏’∂’§’∏÷Ç’∂’•’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’® ÷á ’Ø’°’∂’π’•’¨ scraper ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂, ’∞’•’ø’∏ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’® ’∏÷Ç’≤’°÷Ä’Ø’•’¨"""
    exam = update.message.text
    branch = context.user_data.get("branch")
    phone = context.user_data.get("phone")
    logger.info("User selected exam type: %s", exam)

    # ’è’•’≤’•’Ø’°÷Å’∂’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®, ’∏÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä’® ’¢’•÷Ä’æ’∏÷Ç’¥ ’•’∂ (’∏÷Ä’∏’∑ ’§’•’∫÷Ñ’•÷Ä’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’ß ’¥’´ ÷Ñ’°’∂’´ ’æ’°’µ÷Ä’Ø’µ’°’∂ ’ø÷á’•’¨)
    await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’∫’°’Ω’•÷Ñ, ’∞’°’æ’°÷Ñ’∏÷Ç’¥ ’•’¥ ’ø’æ’µ’°’¨’∂’•÷Ä’® ‚è≥...")

    # ‘ø’°’∂’π’•’¨ scraper-’® ’ø’æ’µ’°’¨ ’∫’°÷Ä’°’¥’•’ø÷Ä’•÷Ä’∏’æ
    try:
        slots = get_free_slots(branch, exam)
    except Exception as e:
        logger.error("Scraper error: %s", e, exc_info=True)
        await update.message.reply_text("‘ø’∂’•÷Ä’•÷Ñ, ’Ω’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ ’ø’æ’µ’°’¨’∂’•÷Ä ’∞’°’æ’°÷Ñ’•’¨’´’Ω÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ÷á’Ω‰∏ÄÊ¨° ’∏÷Ç’∑÷â")
        return ConversationHandler.END

    # ’é’•÷Ä’°’¥’∑’°’Ø’•’¨ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’® ÷á ’∫’°’ø÷Ä’°’Ω’ø’•’¨ ’∫’°’ø’°’Ω’≠’°’∂ msg
    if not slots or len(slots) == 0:
        # ’à’π ’¥’´ ’°’¶’°’ø ÷Ö÷Ä ’π’´ ’£’ø’∂’æ’•’¨
        reply_text = (f"’ë’°’æ’∏÷Ñ, {branch} ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’∏÷Ç’¥ ¬´{exam}¬ª ’∞’°’¥’°÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä ’∂’•÷Ä’Ø’°’µ’∏÷Ç’¥’Ω ’π’Ø’°’∂÷â
‘º÷Ä’°÷Å’∏÷Ç÷Å’´’π ’ø’•’≤’•’Ø’°’ø’æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷É’∏÷Ä’±’•’¨ ’¥’•’Ø ’°’µ’¨ ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ ’Ø’°’¥Á®çÂêé ’Ø÷Ä’Ø’´’∂ ’Ω’ø’∏÷Ç’£’•’¨÷â")
    else:
        reply_lines = []
        for date_str, times in slots:
            # date_str ’∞’°’æ’°’∂’°’¢’°÷Ä YYYY-MM-DD ’±÷á’°’π’°÷É’∏’æ ’ß, ’°’µ’∂ ÷É’∏÷Ñ÷Ä-’´’∂’π ’±÷á’°’π’°÷É’•’∂÷Ñ ’°’æ’•’¨’´ ’®’∂’©’•’º’∂’•’¨’´ ’∞’°’¥’°÷Ä÷â
            pretty_date = date_str
            try:
                # ’ì’∏÷Ä’±’•’¨ ’°’¥’Ω’°’©’´’æ’® ’±÷á’°÷É’∏’≠’•’¨ "DD.MM.YYYY" ’Ø’°’¥ "DD Month YYYY" ’±÷á’°’π’°÷É’´
                from datetime import datetime
                dt = datetime.fromisoformat(date_str)
                pretty_date = dt.strftime("%d.%m.%Y")
            except:
                pass
            if times:
                times_str = " | ".join(times)
                reply_lines.append(f"üìÖ {pretty_date} ‚Äì ’°’º’Ø’° ’™’°’¥’•÷Ä: {times_str}")
            else:
                # ‘µ’©’• times list ’§’°’ø’°÷Ä’Ø ’ß, ’∂’∑’°’∂’°’Ø’•’¨ "’™’°’¥’® ’∫’°÷Ä’¶ ’π’ß"
                reply_lines.append(f"üìÖ {pretty_date} ‚Äì ’∞’°’Ω’°’∂’•’¨’´ ’™’°’¥ ’°’∂’∏÷Ä’∏’∑")
        reply_text = (f"üîé `{branch}` ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’∏÷Ç’¥ **{exam}** ’∞’°’¥’°÷Ä ’£’ø’∂’æ’•’¨ ’ß ’∞’•’ø÷á’µ’°’¨ ’°’¶’°’ø ’™’°’¥’°’∂’°’Ø’°÷Å’∏÷Ç’µ÷Å’®.\n"
                      + "\n".join(reply_lines))
    # ’à÷Ç’≤’°÷Ä’Ø’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’® ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’®
    await update.message.reply_text(reply_text, parse_mode="Markdown")
    # ‘±’æ’°÷Ä’ø’•’¨ conversation-’®
    return ConversationHandler.END

# /cancel ’∞÷Ä’°’¥’°’∂’´ handler, ’•’©’• ÷Ö’£’ø’°’ø’•÷Ä’® ’Ø’°’¥’•’∂’° ’§’°’§’°÷Ä’•÷Å’∂’•’¨
async def cancel(update: Update, context):
    await update.message.reply_text("’Ä’°÷Ä÷Å’∏÷Ç’¥’® ’§’°’§’°÷Ä’•÷Å’æ’•÷Å÷â ‘µ’©’• ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’Ω’Ø’Ω’•÷Ñ ’∂’∏÷Ä’´÷Å, ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ /start÷â")
    return ConversationHandler.END

if __name__ == "__main__":
    # ’ç’ø’•’≤’Æ’•’¨ Application
    app = Application.builder().token(config.TELEGRAM_TOKEN).build()

    # ’ç’ø’•’≤’Æ’•’¨ ConversationHandler states-’•÷Ä’∏’æ
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHONE: [MessageHandler(filters.CONTACT | filters.TEXT, phone_received)],
            ASK_BRANCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, branch_received)],
            ASK_EXAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, exam_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        # allow_reentry = False (default)
    )

    app.add_handler(conv_handler)

    # ‘±’¶’°’ø command-’∂’•÷Ä, ÷Ö÷Ä’´’∂’°’Ø /cancel ’°÷Ä’§’•’∂ ’°’æ’•’¨’°÷Å÷Ä’´’∂÷Ñ conv_handler-’∏÷Ç’¥
    # ‘ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’∞’°’æ’•’¨’µ’°’¨ handlers ’°’æ’•’¨’°÷Å’∂’•’¨ ’•’©’• ’∫’•’ø÷Ñ ’¨’´’∂’´ ’∏÷Ç÷Ä’´’∑ command-’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â

    # ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¥’´ ÷É’∏÷Ñ÷Ä help ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä /help ’∞÷Ä’°’¥’°’∂’´ ’°’ª’°’Ø÷Å’∏÷Ç’¥
    async def help_command(update: Update, context):
        await update.message.reply_text("’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /start ’∏÷Ä’∫’•’Ω’¶’´ ’Ω’Ø’Ω’•’¨ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’æ’°÷Ä’∏÷Ä’§’°’Ø’°’∂ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’°’¶’°’ø ’™’°’¥’•÷Ä’´ ’æ’•÷Ä’°’¢’•÷Ä’µ’°’¨÷â")
    app.add_handler(CommandHandler("help", help_command))

    # ‘±÷Ä’ø’°÷Ä’Ø’•’¨ polling mode-’∏’æ (’•÷Ä’Ø’°÷Ä’°’™’°’¥’Ø’•’ø)
    app.run_polling(stop_signals=None)  # stop_signals=None ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’•’∂÷Ñ, ’∏÷Ä Ctrl+C-’´÷Å ’¢’°÷Å’´ ’°’µ’¨ signal-’∂’•÷Ä ’π’•’∂ ’Ø’°’∂’£’∂’•÷Å’∂’´
