# -*- coding: utf-8 -*-
from typing import List, Tuple, Sequence
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton


def exam_type_keyboard() -> ReplyKeyboardMarkup:
    rows = [["’è’•’Ω’°’Ø’°’∂", "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)


def list_keyboard_from_pairs(pairs: Sequence[Tuple[str, str]], cols: int = 2) -> ReplyKeyboardMarkup:
    labels = [lab for lab, _ in pairs]
    rows: List[List[str]] = []
    row: List[str] = []
    for i, lab in enumerate(labels, 1):
        row.append(lab)
        if i % cols == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)


def filter_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä", "‘∏’Ω’ø ’°’¥’Ω’°’©’æ’´"],
        ["‘∏’Ω’ø ’™’°’¥’´", "’á’°’¢’°’©’æ’° ÷Ö÷Ä’∏’æ"],
        ["‘≤’∏’¨’∏÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’®"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)


def weekdays_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["‘µ÷Ä’Ø’∏÷Ç’∑’°’¢’©’´", "‘µ÷Ä’•÷Ñ’∑’°’¢’©’´"],
        ["’â’∏÷Ä’•÷Ñ’∑’°’¢’©’´", "’Ä’´’∂’£’∑’°’¢’©’´"],
        ["’à÷Ç÷Ä’¢’°’©", "’á’°’¢’°’©", "‘ø’´÷Ä’°’Ø’´"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)


def slot_inline_keyboard(slots: List[dict]) -> InlineKeyboardMarkup:
    # slots items: {"label": "09:00", "value": "09:00"}
    buttons: List[List[InlineKeyboardButton]] = []
    for s in slots:
        label = s.get("label") or s.get("value") or "‚Äî"
        val = s.get("value") or label
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"slot|{val}")])
    # follow/cancel row
    buttons.append(
        [
            InlineKeyboardButton("üîî ’Ñ’´’°÷Å’∂’•’¨ ’∞’•’ø÷á’∏÷Ç’¥’®", callback_data="follow|on"),
            InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data="cancel"),
        ]
    )
    return InlineKeyboardMarkup(buttons)


def confirm_follow_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîî ‘±’µ’∏, ’∞’•’ø÷á’•’¨", callback_data="follow|on")],
            [InlineKeyboardButton("‚ùå ’à’π, ’π’•’≤’°÷Ä’Ø’•’¨", callback_data="cancel")],
        ]
    )


def filter_services_by_exam(services: List[Tuple[str, str]], exam: str) -> List[Tuple[str, str]]:
    exam = exam.strip()
    if exam == "’è’•’Ω’°’Ø’°’∂":
        keys = ["’ø’•’Ω’°’Ø’°’∂", "theory"]
    else:
        keys = ["’£’∏÷Ä’Æ’∂’°’Ø’°’∂", "practical"]
    out = []
    for lab, val in services:
        low = lab.lower()
        if any(k in low for k in keys):
            out.append((lab, val))
    return out or services
