import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from config import TELEGRAM_TOKEN
from keyboards import (
    BRANCHES, branch_keyboard, exam_keyboard, filter_keyboard,
    weekday_keyboard, contact_request_keyboard, THEORY_ID, PRACTICE_ID
)
from scraper import fetch_available_slots

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("bot")

# ’ç’©’•’µ’©’∂’•÷Ä
PHONE, BRANCH, EXAM, FILTER, WEEKDAY, DATE_INPUT, HOUR_INPUT = range(7)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø, {user.first_name or '’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤'} üòä"
    )
    if context.user_data.get("phone"):
        await update.message.reply_text("’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’°÷Ä’§’•’∂ ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß÷â")
        await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’®’ù", reply_markup=branch_keyboard())
        return BRANCH
    else:
        await update.message.reply_text(
            "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ø’´’Ω’æ’•’¨ ’Å’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ’ù ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
            reply_markup=contact_request_keyboard
        )
        return PHONE

# ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä
async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("’ç’•’≤’¥’•÷Ñ ¬´üì± ‘ø’´’Ω’æ’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’∏’æ¬ª ’Ø’∏’≥’°’Ø’®÷â")
        return PHONE
    context.user_data["phone"] = contact.phone_number
    await update.message.reply_text("’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß ‚úÖ")
    await update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’®’ù", reply_markup=branch_keyboard())
    return BRANCH

# ‘≤’°’™’´’∂
async def branch_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        bid = int(q.data.split(":")[1])
    except Exception:
        await q.edit_message_text("’ç’≠’°’¨ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂÷â ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å /start")
        return ConversationHandler.END
    context.user_data["branch_id"] = bid
    name = next((n for n, id_ in BRANCHES if id_ == bid), "‘∏’∂’ø÷Ä’æ’°’Æ ’¢’°’™’´’∂")
    await q.edit_message_text(f"‘∏’∂’ø÷Ä’æ’°’Æ ’¢’°’™’´’∂’®’ù {name} üè¢")
    await q.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®’ù", reply_markup=exam_keyboard())
    return EXAM

# ’î’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø
async def exam_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        sid = int(q.data.split(":")[1])
    except Exception:
        await q.edit_message_text("’ç’≠’°’¨ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø÷â ’ç’Ø’Ω’•÷Ñ /start")
        return ConversationHandler.END
    context.user_data["service_id"] = sid
    await q.edit_message_text(
        f"‘∏’∂’ø÷Ä’æ’°’Æ’ù {'’è’•’Ω’°’Ø’°’∂' if sid == THEORY_ID else '‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂'} ÷Ñ’∂’∂’∏÷Ç’©’µ’∏÷Ç’∂ üìù"
    )
    await q.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ü’´’¨’ø÷Ä’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®’ù", reply_markup=filter_keyboard())
    return FILTER

# ’ñ’´’¨’ø÷Ä
async def filter_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    choice = q.data.split(":")[1]
    context.user_data["filter"] = choice
    if choice == "weekday":
        await q.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®’ù", reply_markup=weekday_keyboard())
        return WEEKDAY
    elif choice == "date":
        await q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’®’ù ’ï’ï.‘±‘±.’è’è’è’è ’±÷á’°’π’°÷É’∏’æ (÷Ö÷Ä‚Ä§ 05.09.2025)")
        return DATE_INPUT
    elif choice == "hour":
        await q.edit_message_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’™’°’¥’® (0-23)’ù ÷Ö÷Ä’´’∂’°’Ø 9 ’Ø’°’¥ 15")
        return HOUR_INPUT
    elif choice == "all":
        await q.edit_message_text("’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ’¢’∏’¨’∏÷Ä ’°’º’Ø’° ÷Ö÷Ä’•÷Ä’®‚Ä§‚Ä§‚Ä§")
        return await fetch_and_send(update, context)
    else:
        await q.edit_message_text("‘±’∂’∞’°’µ’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂÷â /start")
        return ConversationHandler.END

# ’á’°’¢’°’©’æ’° ÷Ö÷Ä
async def weekday_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        idx = int(q.data.split(":")[1])
    except Exception:
        await q.edit_message_text("’ç’≠’°’¨ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä÷â")
        return ConversationHandler.END
    context.user_data["weekday_index"] = idx
    await q.edit_message_text("’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ’®’∂’ø÷Ä’æ’°’Æ ÷Ö÷Ä’æ’° ’°’¶’°’ø ’™’°’¥’•÷Ä’®‚Ä§‚Ä§‚Ä§")
    return await fetch_and_send(update, context)

# ‘±’¥’Ω’°’©’´’æ
async def date_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().replace("/", ".")
    try:
        d, m, y = map(int, text.split("."))
        qd = datetime(y, m, d).date()
    except Exception:
        await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’£÷Ä’•÷Ñ ’≥’´’∑’ø’ù ’ï’ï.‘±‘±.’è’è’è’è (÷Ö÷Ä‚Ä§ 05.09.2025)")
        return DATE_INPUT
    context.user_data["query_date"] = qd
    await update.message.reply_text("’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ’®’∂’ø÷Ä’æ’°’Æ ’°’¥’Ω’°’©’æ’´ ’°’¶’°’ø ’™’°’¥’•÷Ä’®‚Ä§‚Ä§‚Ä§")
    return await fetch_and_send(update, context)

# ‘∫’°’¥
async def hour_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text.isdigit():
        await update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’™’°’¥’®’ù ’©’æ’∏’æ (0-23)")
        return HOUR_INPUT
    hr = int(text)
    if hr < 0 or hr > 23:
        await update.message.reply_text("‘∫’°’¥’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ 0-’´÷Å 23÷â")
        return HOUR_INPUT
    context.user_data["hour"] = hr
    await update.message.reply_text("’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ’®’∂’ø÷Ä’æ’°’Æ ’™’°’¥’´ ’°’¶’°’ø ’™’°’¥’•÷Ä’®‚Ä§‚Ä§‚Ä§")
    return await fetch_and_send(update, context)

# ’ç’¨’∏’©’•÷Ä’´ ÷Ñ’°’∑’∏÷Ç’¥ ÷á ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥
async def fetch_and_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bid = context.user_data.get("branch_id")
    sid = context.user_data.get("service_id")
    if not bid or not sid:
        if update.callback_query:
            await update.callback_query.edit_message_text("’è’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ ’Ω’≠’°’¨÷â ’ç’Ø’Ω’•÷Ñ /start")
        else:
            await update.message.reply_text("’è’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ ’Ω’≠’°’¨÷â ’ç’Ø’Ω’•÷Ñ /start")
        return ConversationHandler.END

    filt = context.user_data.get("filter")
    f_weekday = context.user_data.get("weekday_index")
    f_date = context.user_data.get("query_date")
    f_hour = context.user_data.get("hour")

    slots = fetch_available_slots(
        branch_id=bid,
        service_id=sid,
        filter_weekday=f_weekday,
        filter_date=f_date,
        filter_hour=f_hour
    )

    branch_name = next((n for n, id_ in BRANCHES if id_ == bid), "‘∏’∂’ø÷Ä’æ’°’Æ ’¢’°’™’´’∂")
    exam_name = "’ø’•’Ω’°’Ø’°’∂" if sid == THEORY_ID else "’£’∏÷Ä’Æ’∂’°’Ø’°’∂"

    if not slots:
        msg = f"’ë’°’æ’∏÷Ñ, {branch_name} ’¢’°’™’∂’∏÷Ç’¥ ¬´{exam_name}¬ª ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’°’µ’Ω ’∫’°’∞’´ ’§÷Ä’∏÷Ç’©’µ’°’¥’¢ ’°’¶’°’ø ÷Ö÷Ä/’™’°’¥ ’π’Ø’°÷â"
    else:
        lines = [f"‘±’¶’°’ø ÷Ö÷Ä/’™’°’¥’•÷Ä {branch_name} ’¢’°’™’∂’∏÷Ç’¥ (¬´{exam_name}¬ª):"]
        for d, t in slots[:120]:  # ’Ω’°’∞’¥’°’∂’°÷É’°’Ø’•’∂÷Ñ ’π’°÷É’®
            mname = MONTHS_HY[d.month-1] if 1 <= d.month <= 12 else f"{d.month}-÷Ä’§ ’°’¥’´’Ω"
            lines.append(f"‚Ä¢ {d.day} {mname} {d.year} ‚Äî {t}")
        msg = "\n".join(lines)

    if update.callback_query:
        await update.callback_query.edit_message_text(msg)
    else:
        await update.message.reply_text(msg)
    return ConversationHandler.END

# /slots ‚Äî ’°÷Ä’°’£ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ’æ’•÷Ä’ª’´’∂ ’®’∂’ø÷Ä’æ’°’Æ ’∫’°÷Ä’°’¥’•’ø÷Ä’•÷Ä’∏’æ
async def quick_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (context.user_data.get("branch_id") and context.user_data.get("service_id")):
        await update.message.reply_text("’Ü’°’≠ ’Ø’°’ø’°÷Ä’•÷Ñ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®’ù /start")
        return
    await update.message.reply_text("’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ’æ’•÷Ä’ª’´’∂ ’∫’°’∞’∫’°’∂’æ’°’Æ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’∏’æ‚Ä§‚Ä§‚Ä§")
    # reset filter to 'all'
    context.user_data.pop("weekday_index", None)
    context.user_data.pop("query_date", None)
    context.user_data.pop("hour", None)
    context.user_data["filter"] = "all"
    await fetch_and_send(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHONE: [MessageHandler(filters.CONTACT, phone_received)],
            BRANCH: [CallbackQueryHandler(branch_chosen, pattern=r"^branch:\d+$")],
            EXAM: [CallbackQueryHandler(exam_chosen, pattern=r"^exam:\d+$")],
            FILTER: [CallbackQueryHandler(filter_chosen, pattern=r"^filter:(weekday|date|hour|all)$")],
            WEEKDAY: [CallbackQueryHandler(weekday_selected, pattern=r"^weekday:\d$")],
            DATE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_entered)],
            HOUR_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, hour_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("slots", quick_slots))

    logger.info("Bot is polling‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
