#!/usr/bin/env python3
import logging
import re
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, CallbackQueryHandler,
    Filters, ConversationHandler, CallbackContext
)

import config
import database as db
import rp_client
import keyboards as kb

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# States
REG_PHONE, REG_PSN, REG_SMS, MENU_EXAM, MENU_SERVICE, MENU_BRANCH, MENU_FILTER, MENU_WEEKDAY, MENU_DATE, MENU_HOUR, MENU_TIMES, ASK_EMAIL, CONFIRM_BOOK = range(13)

# ephemeral per-chat runtime cache
USER_SESS = {}  # chat_id -> requests.Session
CTX = {}        # chat_id -> dict

def _get_session(chat_id: int):
    sess = USER_SESS.get(chat_id)
    if sess:
        return sess
    # try load cookies from DB
    cookies = db.load_cookies(chat_id)
    sess = rp_client.init_session(seed_cookies=cookies if cookies else None)
    USER_SESS[chat_id] = sess
    return sess

def _validate_phone(s: str) -> bool:
    return bool(re.fullmatch(r"(\+374\d{8}|0\d{8})", s))

def _validate_psn(s: str) -> bool:
    return bool(re.fullmatch(r"\d{10}", s))

def _validate_email(s: str) -> bool:
    return bool(re.fullmatch(r"[^@\s]+@[^@\s]+\.[^@\s]+", s))

def _today_ddmmYYYY():
    return datetime.now().strftime("%d-%m-%Y")

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    C.clear()

    # Ask phone number (contact button and text hint)
    contact_button = KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’Ω", request_contact=True)
    update.message.reply_text(
        f"‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø÷â\n"
        f"‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®÷â\n{config.PHONE_HINT}",
        reply_markup=ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)
    )
    return REG_PHONE

def reg_phone(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})

    phone = None
    if update.message.contact and update.message.contact.phone_number:
        phone = update.message.contact.phone_number
        # Normalize to +374XXXXXXXX if starts with 374 or 0
        if phone.startswith("374") and len(phone) == 11:
            phone = "+" + phone
        if phone.startswith("0") and len(phone) == 9:
            phone = "+374" + phone[1:]
    else:
        text = (update.message.text or "").strip()
        phone = text

    if not _validate_phone(phone):
        update.message.reply_text(
            f"’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’Ω’≠’°’¨ ’ß÷â {config.PHONE_HINT}",
            reply_markup=kb.ok_cancel_kb("‘ø÷Ä’Ø’´’∂ ÷É’∏÷Ä’±’•’¨", "’â’•’≤’°÷Ä’Ø’•’¨"),
        )
        return REG_PHONE

    C["phone"] = phone
    update.message.reply_text(
        "’Ä’°’≥’•’¨’´ ’ß÷â ‘±’µ’™’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Å’•÷Ä ’∞’°’∂÷Ä’°’µ’´’∂ ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ (’ä‘≥’Ä/’Ω’∏÷Å‚Ä§÷Ñ’°÷Ä’ø) 10-’∂’´’∑ ’∞’°’¥’°÷Ä’°’∂’´’∑’®÷â",
    )
    return REG_PSN

def reg_psn(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})

    psn = (update.message.text or "").strip()
    if not _validate_psn(psn):
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’≥’´’∑’ø 10-’∂’´’∑ ’∞’°’¥’°÷Ä (÷Ö÷Ä‚Ä§ 1234567890)÷â")
        return REG_PSN

    C["psn"] = psn
    # try login
    try:
        resp = rp_client.login(sess, psn=psn, phone=C["phone"], country="374")
    except Exception as e:
        logger.exception("login error")
        update.message.reply_text("’ç’≠’°’¨’ù ’Ω’•÷Ä’æ’•÷Ä’´ ’∞’•’ø ’Ø’°’∫’® ’π’Ω’ø’°÷Å’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å /start")
        return ConversationHandler.END

    # Heuristics: if response has something indicating verify step
    text_resp = str(resp).lower()
    if "verify" in text_resp or "sms" in text_resp or "token" in text_resp:
        update.message.reply_text("’ç’Ñ’ç ’Ø’∏’§’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’ç’Ñ’ç ’Ø’∏’§’®’ù (’¥’´’∂’π÷á 6 ’©’æ’°’∂’∑’°’∂)÷â")
        return REG_SMS

    # success without SMS
    db.save_cookies(chat_id, sess.cookies.get_dict())
    db.set_verified(chat_id, True)
    update.message.reply_text(
        "’Ñ’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’æ’•÷Å ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢÷â\n"
        "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /search’ù ’™’°’¥’°’∂’°’Ø’∂’•÷Ä ’∏÷Ä’∏’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
    )
    return ConversationHandler.END

def reg_code(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    code = (update.message.text or "").strip()
    if not re.fullmatch(r"\d{3,8}", code):
        update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’≥’´’∑’ø ’Ø’∏’§ (’¥’´’∂’π÷á 8 ’©’æ’°’∂’∑’°’∂)÷â")
        return REG_SMS
    try:
        resp = rp_client.verify(sess, code)
    except Exception:
        logger.exception("verify error")
        update.message.reply_text("’ç’≠’°’¨’ù ’∞’°’Ω’ø’°’ø’∏÷Ç’¥’® ’π’∞’°’ª’∏’≤’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂ /start")
        return ConversationHandler.END

    db.save_cookies(chat_id, sess.cookies.get_dict())
    db.set_verified(chat_id, True)
    update.message.reply_text("’Ä’°’Ω’ø’°’ø’æ’•÷Å ‚úÖ÷â ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’Ω’Ø’Ω’•’¨ ’∏÷Ä’∏’∂’∏÷Ç’¥’®’ù /search")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‘≥’∏÷Ä’Æ’®’∂’©’°÷Å’® ’§’°’§’°÷Ä’•÷Å’æ’•÷Å÷â")
    return ConversationHandler.END

# ---------------- SEARCH FLOW ----------------

def cmd_search(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    C["flow"] = {}
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’∂’∂’∏÷Ç’©’µ’°’∂ ’ø’•’Ω’°’Ø’®‚Ä§", reply_markup=kb.exam_type_kb())
    return MENU_EXAM

def pick_exam(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    choice = (update.message.text or "").strip()

    # Fetch dynamic lists
    try:
        branches, services = rp_client.fetch_branches_and_services(sess)
    except Exception:
        logger.exception("fetch lists error")
        update.message.reply_text("’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ÷á ’¢’°’™’´’∂’∂’•÷Ä’´ ÷Å’°’∂’Ø’®÷â ’ì’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂ /search")
        return ConversationHandler.END

    C["flow"]["branches"] = branches
    C["flow"]["services_all"] = services

    if choice == "’è’•’Ω’°’Ø’°’∂":
        filtered = [(sid, sname) for sid, sname in services if "’ø’•’Ω’°’Ø" in sname.lower()]
    elif choice == "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂":
        filtered = [(sid, sname) for sid, sname in services if "’£’∏÷Ä’Æ’∂" in sname.lower()]
    else:
        filtered = services

    if not filtered:
        filtered = services

    C["flow"]["services"] = filtered
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’®‚Ä§", reply_markup=kb.services_kb(filtered))
    return MENU_SERVICE

def pick_service(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    label = (update.message.text or "").strip()
    # map to id
    sid = None
    for s_id, s_name in C["flow"]["services"]:
        if s_name == label:
            sid = s_id; break
    if not sid:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ÷Å’°’∂’Ø’´÷Å÷â")
        return MENU_SERVICE

    C["flow"]["service_id"] = sid
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’°’∂’¥’∏÷Ç’∂÷Ñ’®‚Ä§", reply_markup=kb.branches_kb(C["flow"]["branches"]))
    return MENU_BRANCH

def pick_branch(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    label = (update.message.text or "").strip()
    bid = None
    for b_id, b_name in C["flow"]["branches"]:
        if b_name == label:
            bid = b_id; break
    if not bid:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ÷Å’°’∂’Ø’´÷Å÷â")
        return MENU_BRANCH

    C["flow"]["branch_id"] = bid
    update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’∏÷Ä’∏’∂’¥’°’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®‚Ä§", reply_markup=kb.filter_kb())
    return MENU_FILTER

def pick_filter(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    choice = (update.message.text or "").strip()

    if choice == "’ñ’´’¨’ø÷Ä’ù ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’∏’æ":
        update.message.reply_text("‘∏’∂’ø÷Ä’•÷Ñ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’®‚Ä§", reply_markup=kb.weekdays_kb())
        return MENU_WEEKDAY
    elif choice == "’ñ’´’¨’ø÷Ä’ù ’°’¥’Ω’°’©’æ’∏’æ":
        update.message.reply_text(f"’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® (’ï’ï-‘±‘±-’è’è’è’è)\n{config.DATE_FORMAT_HINT}")
        return MENU_DATE
    elif choice == "’ñ’´’¨’ø÷Ä’ù ’™’°’¥’∏’æ":
        update.message.reply_text(f"’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’™’°’¥’® (‘∫‘∫:’ê’ê)\n{config.HOUR_FORMAT_HINT}")
        return MENU_HOUR
    elif choice == "‘±’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä’®":
        return _do_nearest(update, context)
    elif choice == "‘≤’∏’¨’∏÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’®":
        return _do_all_days(update, context)
    else:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’°’Æ ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä’´÷Å÷â")
        return MENU_FILTER

def _do_nearest(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    b = C["flow"]["branch_id"]; s = C["flow"]["service_id"]

    try:
        resp = rp_client.nearest_day(sess, b, s, _today_ddmmYYYY())
        day = resp.get("data", {}).get("day")
        slots = resp.get("data", {}).get("slots") or []
    except Exception:
        logger.exception("nearest error")
        update.message.reply_text("’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ’°’¥’•’∂’°’¥’∏’ø ÷Ö÷Ä’®÷â")
        return ConversationHandler.END

    if not day or not slots:
        update.message.reply_text("‘±’¶’°’ø ’¥’∏’ø ÷Ö÷ÄÊöÇ ’π’£’ø’∂’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ¬´‘≤’∏’¨’∏÷Ä ’°’¶’°’ø ÷Ö÷Ä’•÷Ä’®¬ª ’Ø’°’¥ ÷É’∏’≠’•÷Ñ ’¢’°’™’´’∂’®/’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’®÷â")
        return ConversationHandler.END

    C["flow"]["date"] = day
    C["flow"]["slots"] = slots
    update.message.reply_text(f"‘±’¥’•’∂’°’¥’∏’ø ’°’¶’°’ø ÷Ö÷Ä’®’ù {day}\n‘∏’∂’ø÷Ä’•÷Ñ ’™’°’¥’®’ù", reply_markup=kb.times_kb(slots))
    return MENU_TIMES

def _iter_dates(n_days: int):
    base = datetime.now()
    for i in range(n_days):
        d = base + timedelta(days=i)
        yield d.strftime("%d-%m-%Y")

def _do_all_days(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    b = C["flow"]["branch_id"]; s = C["flow"]["service_id"]

    found = []
    try:
        for d in _iter_dates(config.LOOKAHEAD_DAYS):
            slots = rp_client.slots_for_day(sess, b, s, d)
            if slots:
                found.append((d, len(slots)))
    except Exception:
        logger.exception("list days error")

    if not found:
        update.message.reply_text("’Ñ’∏’ø’°’Ø’° ÷Ö÷Ä’•÷Ä’´ ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â ’ì’∏÷Ä’±’•÷Ñ ÷É’∏’≠’•’¨ ÷Ü’´’¨’ø÷Ä’•÷Ä’®÷â")
        return ConversationHandler.END

    lines = [f"‚Ä¢ {d} ‚Äî {cnt} ’°’¶’°’ø ’™’°’¥" for d, cnt in found[:50]]
    update.message.reply_text("‘≥’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’•÷Å’∏’≤ ÷Ö÷Ä’•÷Ä’ù\n" + "\n".join(lines) + "\n\n’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ ¬´’ñ’´’¨’ø÷Ä’ù ’°’¥’Ω’°’©’æ’∏’æ¬ª’ù ÷Ö÷Ä’® ’®’∂’ø÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
    return ConversationHandler.END

def pick_weekday(update: Update, context: CallbackContext):
    wd_map = {
        "‘µ÷Ä’Ø’∏÷Ç’∑’°’¢’©’´": 0, "‘µ÷Ä’•÷Ñ’∑’°’¢’©’´": 1, "’â’∏÷Ä’•÷Ñ’∑’°’¢’©’´": 2,
        "’Ä’´’∂’£’∑’°’¢’©’´": 3, "’à÷Ç÷Ä’¢’°’©": 4, "’á’°’¢’°’©": 5, "‘ø’´÷Ä’°’Ø’´": 6
    }
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    b = C["flow"]["branch_id"]; s = C["flow"]["service_id"]
    label = (update.message.text or "").strip()
    if label not in wd_map:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’æ’°’∂’´÷Å÷â")
        return MENU_WEEKDAY
    want = wd_map[label]

    found = []
    try:
        for d in _iter_dates(config.LOOKAHEAD_DAYS):
            dt = datetime.strptime(d, "%d-%m-%Y")
            if dt.weekday() != want:
                continue
            slots = rp_client.slots_for_day(sess, b, s, d)
            if slots:
                found.append((d, len(slots)))
    except Exception:
        logger.exception("weekday list error")

    if not found:
        update.message.reply_text("’è’æ’µ’°’¨ ’∑’°’¢’°’©’æ’° ÷Ö÷Ä’∏’æ ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’Ø’°’∂ ’¥’∏’ø’°’Ø’° ’™’°’¥’°’∂’°’Ø’°’∞’°’ø’æ’°’Æ’∏÷Ç’¥÷â")
        return ConversationHandler.END

    lines = [f"‚Ä¢ {d} ‚Äî {cnt} ’°’¶’°’ø ’™’°’¥" for d, cnt in found[:50]]
    update.message.reply_text(f"{label} ÷Ö÷Ä’•÷Ä’´’∂ ’°’º’Ø’° ÷Ö÷Ä’•÷Ä’ù\n" + "\n".join(lines) + "\n\n’ï’£’ø‚Ä§ ¬´’ñ’´’¨’ø÷Ä’ù ’°’¥’Ω’°’©’æ’∏’æ¬ª’ù ÷Ö÷Ä’® ’®’∂’ø÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
    return ConversationHandler.END

def pick_date(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    b = C["flow"]["branch_id"]; s = C["flow"]["service_id"]

    d = (update.message.text or "").strip()
    if not re.fullmatch(r"\d{2}-\d{2}-\d{4}", d):
        update.message.reply_text(f"‘±’¥’Ω’°’©’´’æ’® ’Ω’≠’°’¨ ’ß÷â {config.DATE_FORMAT_HINT}")
        return MENU_DATE

    try:
        slots = rp_client.slots_for_day(sess, b, s, d)
    except Exception:
        logger.exception("slots day error")
        update.message.reply_text("’â’Ω’ø’°÷Å’æ’•÷Å ’¢’•’º’∂’•’¨ ’™’°’¥’•÷Ä’®÷â")
        return ConversationHandler.END

    if not slots:
        update.message.reply_text(f"{d} ÷Ö÷Ä’∏’æ ’°’¶’°’ø ’™’°’¥ ’π’Ø’°÷â ’ì’∏÷Ä’±’•÷Ñ ’°’µ’¨ ÷Ö÷Ä÷â")
        return ConversationHandler.END

    C["flow"]["date"] = d
    C["flow"]["slots"] = slots
    update.message.reply_text(f"{d} ÷Ö÷Ä’æ’° ’°’¶’°’ø ’™’°’¥’•÷Ä’®’ù ‘∏’∂’ø÷Ä’•÷Ñ ’™’°’¥’®÷â", reply_markup=kb.times_kb(slots))
    return MENU_TIMES

def pick_hour_filter(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})
    b = C["flow"]["branch_id"]; s = C["flow"]["service_id"]

    hhmm = (update.message.text or "").strip()
    if not re.fullmatch(r"\d{2}:\d{2}", hhmm):
        update.message.reply_text(f"‘∫’°’¥’´ ÷Ü’∏÷Ä’¥’°’ø’® ’Ω’≠’°’¨ ’ß÷â {config.HOUR_FORMAT_HINT}")
        return MENU_HOUR

    found = []
    try:
        for d in _iter_dates(config.LOOKAHEAD_DAYS):
            slots = rp_client.slots_for_day(sess, b, s, d)
            if any((sl.get("value") == hhmm or sl.get("label") == hhmm) for sl in slots):
                found.append(d)
    except Exception:
        logger.exception("hour filter error")

    if not found:
        update.message.reply_text(f"’Ñ’∏’ø’°’Ø’° {config.LOOKAHEAD_DAYS} ÷Ö÷Ä’∏÷Ç’¥ {hhmm}-’´’∂ ’°’¶’°’ø ’™’°’¥’•÷Ä ’π’Ø’°’∂÷â")
        return ConversationHandler.END

    update.message.reply_text("’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷Ö÷Ä’•÷Ä’ù\n" + "\n".join(f"‚Ä¢ {d}" for d in found[:50]))
    return ConversationHandler.END

def pick_time(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    label = (update.message.text or "").strip()
    slots = C["flow"].get("slots") or []
    slot = next((sl for sl in slots if (sl.get("label") == label or sl.get("value") == label)), None)
    if not slot:
        update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’™’°’¥’•÷Ä’® ÷Å’∏÷Ç÷Å’°’Ø’´÷Å÷â")
        return MENU_TIMES

    C["flow"]["slot_time"] = slot.get("value") or slot.get("label")
    update.message.reply_text(f"’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Å’•÷Ä ’ß’¨‚Ä§ ÷É’∏’Ω’ø’® ’°’¥÷Ä’°’£÷Ä’¥’°’∂ ’∞’°’¥’°÷Ä÷â\n{config.EMAIL_HINT}")
    return ASK_EMAIL

def ask_email(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    C = CTX.setdefault(chat_id, {})
    email = (update.message.text or "").strip()
    if not _validate_email(email):
        update.message.reply_text("‘∑’¨‚Ä§ ÷É’∏’Ω’ø’´ ÷Ü’∏÷Ä’¥’°’ø’® ’Ω’≠’°’¨ ’ß÷â ‘ø÷Ä’Ø’´’∂ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ÷â")
        return ASK_EMAIL
    C["flow"]["email"] = email

    b = C["flow"]["branch_id"]
    s = C["flow"]["service_id"]
    d = C["flow"]["date"]
    t = C["flow"]["slot_time"]
    update.message.reply_text(
        f"’Ä’°’Ω’ø’°’ø’∏’û÷Ç’¥ ’•÷Ñ ’°’¥÷Ä’°’£÷Ä’∏÷Ç’¥’®.\n"
        f"‚Ä¢ ‘≤’°’™’´’∂’ù {b}\n‚Ä¢ ‘æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’ù {s}\n‚Ä¢ ‘±’¥’Ω’°’©’´’æ’ù {d}\n‚Ä¢ ‘∫’°’¥’ù {t}\n‚Ä¢ Email’ù {email}",
        reply_markup=kb.yes_no_kb()
    )
    return CONFIRM_BOOK

def confirm_book(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sess = _get_session(chat_id)
    C = CTX.setdefault(chat_id, {})

    if (update.message.text or "").strip() != "‘±’µ’∏":
        update.message.reply_text("’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
        return ConversationHandler.END

    try:
        resp = rp_client.register_slot(sess,
            C["flow"]["branch_id"], C["flow"]["service_id"], C["flow"]["date"],
            C["flow"]["slot_time"], C["flow"]["email"]
        )
        pin = resp.get("pin") or ""
        msg = "‘±’¥÷Ä’°’£÷Ä’∏÷Ç’¥’® ’∞’°’ª’∏’≤’æ’•÷Å ‚úÖ"
        if pin:
            msg += f"\n’Å’•÷Ä PIN’ù {pin}"
        update.message.reply_text(msg)
    except Exception:
        logger.exception("register error")
        update.message.reply_text("‘±’¥÷Ä’°’£÷Ä’∏÷Ç’¥’® ’π’Ω’ø’°÷Å’æ’•÷Å÷â ’ì’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂÷â")
        return ConversationHandler.END

    # save latest cookies
    db.save_cookies(chat_id, sess.cookies.get_dict())
    return ConversationHandler.END

# ------------- TELEGRAM WIRING -------------

def main():
    if not config.BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN environment variable is required")

    updater = Updater(token=config.BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # Registration conversation
    reg_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REG_PHONE: [
                MessageHandler(Filters.contact, reg_phone),
                MessageHandler(Filters.text & ~Filters.command, reg_phone),
            ],
            REG_PSN: [MessageHandler(Filters.text & ~Filters.command, reg_psn)],
            REG_SMS: [MessageHandler(Filters.text & ~Filters.command, reg_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="reg_conv",
        persistent=False,
        per_user=True,
        per_chat=True,
    )

    search_conv = ConversationHandler(
        entry_points=[CommandHandler("search", cmd_search)],
        states={
            MENU_EXAM: [MessageHandler(Filters.text & ~Filters.command, pick_exam)],
            MENU_SERVICE: [MessageHandler(Filters.text & ~Filters.command, pick_service)],
            MENU_BRANCH: [MessageHandler(Filters.text & ~Filters.command, pick_branch)],
            MENU_FILTER: [MessageHandler(Filters.text & ~Filters.command, pick_filter)],
            MENU_WEEKDAY: [MessageHandler(Filters.text & ~Filters.command, pick_weekday)],
            MENU_DATE: [MessageHandler(Filters.text & ~Filters.command, pick_date)],
            MENU_HOUR: [MessageHandler(Filters.text & ~Filters.command, pick_hour_filter)],
            MENU_TIMES: [MessageHandler(Filters.text & ~Filters.command, pick_time)],
            ASK_EMAIL: [MessageHandler(Filters.text & ~Filters.command, ask_email)],
            CONFIRM_BOOK: [MessageHandler(Filters.text & ~Filters.command, confirm_book)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="search_conv",
        persistent=False,
        per_user=True,
        per_chat=True,
    )

    dp.add_handler(reg_conv)
    dp.add_handler(search_conv)

    # Webhook mode for Render
    if config.WEBHOOK_BASE_URL:
        webhook_path = f"/bot/{config.BOT_TOKEN}"
        updater.start_webhook(listen="0.0.0.0", port=config.PORT, url_path=webhook_path)
        updater.bot.set_webhook(url=f"{config.WEBHOOK_BASE_URL}{webhook_path}")
        logger.info("Bot started via webhook on port %s", config.PORT)
        updater.idle()
    else:
        # Polling fallback (local/dev)
        logger.info("Starting bot with long polling‚Ä¶")
        updater.start_polling(clean=True)
        updater.idle()

if __name__ == "__main__":
    main()
